{"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"widgets":{"application/vnd.jupyter.widget-state+json":{"72c09a8b45054328a07b0dadd2258b19":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_c59bf51f77f64b55a079576d744b7ba0","IPY_MODEL_f1a04b3f983a4b0591b447b2c35fbf9a","IPY_MODEL_82302423beaa40e380df5643ab1f53f4"],"layout":"IPY_MODEL_731cae54d4f740e9841f8556fa5aaa33"}},"c59bf51f77f64b55a079576d744b7ba0":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_2df5f59568574dee9302e504be8ecd15","placeholder":"​","style":"IPY_MODEL_5aa89db5a7ce4e8d81307d4cb52367c8","value":"Downloading builder script: 100%"}},"f1a04b3f983a4b0591b447b2c35fbf9a":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_aa047d9781f74444b3e34edf7203e104","max":6338,"min":0,"orientation":"horizontal","style":"IPY_MODEL_c660c7638f594bc7a2e841b02307a562","value":6338}},"82302423beaa40e380df5643ab1f53f4":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_9137c77338d444d5a31db3475faaba6f","placeholder":"​","style":"IPY_MODEL_017f96fbd45f4246853b70d1442dafc3","value":" 6.34k/6.34k [00:00&lt;00:00, 463kB/s]"}},"731cae54d4f740e9841f8556fa5aaa33":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2df5f59568574dee9302e504be8ecd15":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5aa89db5a7ce4e8d81307d4cb52367c8":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"aa047d9781f74444b3e34edf7203e104":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c660c7638f594bc7a2e841b02307a562":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"9137c77338d444d5a31db3475faaba6f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"017f96fbd45f4246853b70d1442dafc3":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"12294cd9aa374777ace13f5dfc98090e":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_3ca532faca104fc597a10ebd3083bba3","IPY_MODEL_2c76626366d54000849a07024148e236","IPY_MODEL_e6485771fb52421f8a371c22924096d5"],"layout":"IPY_MODEL_f0fb9ff3798f4abab86fb66b5e20c456"}},"3ca532faca104fc597a10ebd3083bba3":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_e3cebcc890a34ead94e5022c2c226a1f","placeholder":"​","style":"IPY_MODEL_23f55ab3fb0d48e4b4cf481b3010bd4c","value":"pytorch_model.bin: 100%"}},"2c76626366d54000849a07024148e236":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_618f6e0466bf4b9c9fedd63fa5a2de62","max":440343552,"min":0,"orientation":"horizontal","style":"IPY_MODEL_d586b68abc834adf8c608f2cf68b6ec9","value":440343552}},"e6485771fb52421f8a371c22924096d5":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_c43273796880453f88cc682dbac699b5","placeholder":"​","style":"IPY_MODEL_4e832deb4896487f81fbf853cb11ec2c","value":" 440M/440M [00:02&lt;00:00, 193MB/s]"}},"f0fb9ff3798f4abab86fb66b5e20c456":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e3cebcc890a34ead94e5022c2c226a1f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"23f55ab3fb0d48e4b4cf481b3010bd4c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"618f6e0466bf4b9c9fedd63fa5a2de62":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d586b68abc834adf8c608f2cf68b6ec9":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"c43273796880453f88cc682dbac699b5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4e832deb4896487f81fbf853cb11ec2c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"a920b970920e43739c0bd62d19a688d5":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_df65a57a166b4471a54daa0226ba464a","IPY_MODEL_4b73c70b327a449093eeacbf90bd2c27","IPY_MODEL_c1ddd1c687ac44619f07f37482d178e1"],"layout":"IPY_MODEL_3d5e4bb5c7a14f0a99719bff08899bf7"}},"df65a57a166b4471a54daa0226ba464a":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_a55c1850bd5c4130a346f3ede97e5223","placeholder":"​","style":"IPY_MODEL_d2b0a65863e34d4daf0ae6db169e1796","value":"tokenizer_config.json: 100%"}},"4b73c70b327a449093eeacbf90bd2c27":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_2c963cb539794e76bbf3fea950642add","max":48,"min":0,"orientation":"horizontal","style":"IPY_MODEL_d0057a9408ec4eeb88109a82f057053c","value":48}},"c1ddd1c687ac44619f07f37482d178e1":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_2cbb18f1c8284a8988bc33f6e2d6436a","placeholder":"​","style":"IPY_MODEL_be5ed15b3cca45528f42b3aef50341c1","value":" 48.0/48.0 [00:00&lt;00:00, 1.13kB/s]"}},"3d5e4bb5c7a14f0a99719bff08899bf7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a55c1850bd5c4130a346f3ede97e5223":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d2b0a65863e34d4daf0ae6db169e1796":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"2c963cb539794e76bbf3fea950642add":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d0057a9408ec4eeb88109a82f057053c":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"2cbb18f1c8284a8988bc33f6e2d6436a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"be5ed15b3cca45528f42b3aef50341c1":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"1fec487973a24f6395fa9a426dda8af1":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_dfb8c1f490dc47528f7c2f87940b0850","IPY_MODEL_5292fd5fd83f48979d3c961fd2916faf","IPY_MODEL_ce8aa189946a4ea78bfd772b72becba0"],"layout":"IPY_MODEL_29dbc1f9e472495284819cbf8ceee029"}},"dfb8c1f490dc47528f7c2f87940b0850":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_a1bd7729d2144337acd179496d75fa42","placeholder":"​","style":"IPY_MODEL_d0ecf66587ac4ebaa92107b062313a34","value":"vocab.txt: 100%"}},"5292fd5fd83f48979d3c961fd2916faf":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_695bd7f3450944a2910b2ed1d19c4f18","max":231508,"min":0,"orientation":"horizontal","style":"IPY_MODEL_f30b12c0d1a84a5782a2385f0b80768e","value":231508}},"ce8aa189946a4ea78bfd772b72becba0":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_9037a6b51aa3445bba3667c69b563e60","placeholder":"​","style":"IPY_MODEL_d036b6d4b99a41fb86bc0f35e7f5e86a","value":" 232k/232k [00:00&lt;00:00, 1.78MB/s]"}},"29dbc1f9e472495284819cbf8ceee029":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a1bd7729d2144337acd179496d75fa42":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d0ecf66587ac4ebaa92107b062313a34":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"695bd7f3450944a2910b2ed1d19c4f18":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f30b12c0d1a84a5782a2385f0b80768e":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"9037a6b51aa3445bba3667c69b563e60":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d036b6d4b99a41fb86bc0f35e7f5e86a":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"862044f96fb94b739bd64172a98feaa3":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_bab71454dbb14053be8aba6a648741c1","IPY_MODEL_a0171aeb0b594deeb204b244aa75b7df","IPY_MODEL_d01337b2bb00428e8137d0bec6b0961f"],"layout":"IPY_MODEL_b18f7365ca224fdc82d701a859a27b9e"}},"bab71454dbb14053be8aba6a648741c1":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_137d37c638644ce5a9a455b45c91a768","placeholder":"​","style":"IPY_MODEL_43d1a15808a948a09bf172c857dab917","value":"tokenizer.json: 100%"}},"a0171aeb0b594deeb204b244aa75b7df":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_b3d46ea5b0084c74af593425e9e58845","max":466062,"min":0,"orientation":"horizontal","style":"IPY_MODEL_77d20d31698649b88e2710906c01d88a","value":466062}},"d01337b2bb00428e8137d0bec6b0961f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_1e7dda02d55541bebc95cbe5601f9a40","placeholder":"​","style":"IPY_MODEL_67639b359af94c58ae9135b5e75bd634","value":" 466k/466k [00:00&lt;00:00, 2.33MB/s]"}},"b18f7365ca224fdc82d701a859a27b9e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"137d37c638644ce5a9a455b45c91a768":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"43d1a15808a948a09bf172c857dab917":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"b3d46ea5b0084c74af593425e9e58845":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"77d20d31698649b88e2710906c01d88a":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"1e7dda02d55541bebc95cbe5601f9a40":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"67639b359af94c58ae9135b5e75bd634":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"b73632f6ed61435fa24e68fe82204de2":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_297000a455904523bf3e8ae205fc0001","IPY_MODEL_d08acfce63d944e3942b931b0c089277","IPY_MODEL_f4cad3606d744750b795ed833d2c2b18"],"layout":"IPY_MODEL_db9c9f99dc024906a0c27ea7706f6b5e"}},"297000a455904523bf3e8ae205fc0001":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_45d171a6b8ae4b5e9e2740f097b43799","placeholder":"​","style":"IPY_MODEL_f930bfd1f68c4dd6965d295462a1e2ea","value":"config.json: 100%"}},"d08acfce63d944e3942b931b0c089277":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_d4144a08691548c98c15ce8495253bfc","max":483,"min":0,"orientation":"horizontal","style":"IPY_MODEL_f62a1e79ab98406e9f84d9f0bf81e96a","value":483}},"f4cad3606d744750b795ed833d2c2b18":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_1dae96d9abf04bbaa31c86cbfd23ae4a","placeholder":"​","style":"IPY_MODEL_5a7b1d05016245498d432668f382089c","value":" 483/483 [00:00&lt;00:00, 7.08kB/s]"}},"db9c9f99dc024906a0c27ea7706f6b5e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"45d171a6b8ae4b5e9e2740f097b43799":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f930bfd1f68c4dd6965d295462a1e2ea":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"d4144a08691548c98c15ce8495253bfc":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f62a1e79ab98406e9f84d9f0bf81e96a":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"1dae96d9abf04bbaa31c86cbfd23ae4a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5a7b1d05016245498d432668f382089c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"2a2bb0e2808d4975a628abe170b4d187":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_5a788c7c0173480383c5cea9bfcda6f2","IPY_MODEL_8901d5bd59a548b698d39fb27fe641ab","IPY_MODEL_5513f880260e43a497c350a8ead14649"],"layout":"IPY_MODEL_8a8ae4186eb84076b81877d0fbae2a8e"}},"5a788c7c0173480383c5cea9bfcda6f2":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_3ea9907bf8a5465d8a61b31412a947ad","placeholder":"​","style":"IPY_MODEL_26a19f1c3a8b4bf2a4553e76302f5b32","value":"Map:   0%"}},"8901d5bd59a548b698d39fb27fe641ab":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"danger","description":"","description_tooltip":null,"layout":"IPY_MODEL_ea6056278b2844d4b3965680ae12fb77","max":4896,"min":0,"orientation":"horizontal","style":"IPY_MODEL_6527b24a6e8e4475aa4256e62fa94315","value":0}},"5513f880260e43a497c350a8ead14649":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_52d825741f894f1588997b58fd074bf0","placeholder":"​","style":"IPY_MODEL_9766278a7d444e60821b89924ecee0b1","value":" 0/4896 [00:01&lt;?, ? examples/s]"}},"8a8ae4186eb84076b81877d0fbae2a8e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"3ea9907bf8a5465d8a61b31412a947ad":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"26a19f1c3a8b4bf2a4553e76302f5b32":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ea6056278b2844d4b3965680ae12fb77":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6527b24a6e8e4475aa4256e62fa94315":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"52d825741f894f1588997b58fd074bf0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9766278a7d444e60821b89924ecee0b1":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":8652412,"sourceType":"datasetVersion","datasetId":5182861},{"sourceId":8726185,"sourceType":"datasetVersion","datasetId":5236922}],"dockerImageVersionId":30673,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Coding\n","metadata":{"id":"Gztlb1WGFsif"}},{"cell_type":"code","source":"!pip install -U transformers\n!pip install -U accelerate\n!pip install -U datasets","metadata":{"id":"ZFPQDJkHIuRx","colab":{"base_uri":"https://localhost:8080/"},"outputId":"da8e777a-b7ec-49cb-d578-81759fde4f1f","execution":{"iopub.status.busy":"2024-06-19T10:19:59.710243Z","iopub.execute_input":"2024-06-19T10:19:59.710629Z","iopub.status.idle":"2024-06-19T10:21:16.240342Z","shell.execute_reply.started":"2024-06-19T10:19:59.710598Z","shell.execute_reply":"2024-06-19T10:21:16.238970Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Requirement already satisfied: transformers in /opt/conda/lib/python3.10/site-packages (4.38.2)\nCollecting transformers\n  Downloading transformers-4.41.2-py3-none-any.whl.metadata (43 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m43.8/43.8 kB\u001b[0m \u001b[31m1.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from transformers) (3.13.1)\nCollecting huggingface-hub<1.0,>=0.23.0 (from transformers)\n  Downloading huggingface_hub-0.23.4-py3-none-any.whl.metadata (12 kB)\nRequirement already satisfied: numpy>=1.17 in /opt/conda/lib/python3.10/site-packages (from transformers) (1.26.4)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from transformers) (21.3)\nRequirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from transformers) (6.0.1)\nRequirement already satisfied: regex!=2019.12.17 in /opt/conda/lib/python3.10/site-packages (from transformers) (2023.12.25)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from transformers) (2.31.0)\nCollecting tokenizers<0.20,>=0.19 (from transformers)\n  Downloading tokenizers-0.19.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.7 kB)\nRequirement already satisfied: safetensors>=0.4.1 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.4.2)\nRequirement already satisfied: tqdm>=4.27 in /opt/conda/lib/python3.10/site-packages (from transformers) (4.66.1)\nRequirement already satisfied: fsspec>=2023.5.0 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub<1.0,>=0.23.0->transformers) (2024.3.0)\nRequirement already satisfied: typing-extensions>=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub<1.0,>=0.23.0->transformers) (4.9.0)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.0->transformers) (3.1.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (2024.2.2)\nDownloading transformers-4.41.2-py3-none-any.whl (9.1 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.1/9.1 MB\u001b[0m \u001b[31m58.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading huggingface_hub-0.23.4-py3-none-any.whl (402 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m402.6/402.6 kB\u001b[0m \u001b[31m23.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading tokenizers-0.19.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.6/3.6 MB\u001b[0m \u001b[31m71.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m\n\u001b[?25hInstalling collected packages: huggingface-hub, tokenizers, transformers\n  Attempting uninstall: huggingface-hub\n    Found existing installation: huggingface-hub 0.21.4\n    Uninstalling huggingface-hub-0.21.4:\n      Successfully uninstalled huggingface-hub-0.21.4\n  Attempting uninstall: tokenizers\n    Found existing installation: tokenizers 0.15.2\n    Uninstalling tokenizers-0.15.2:\n      Successfully uninstalled tokenizers-0.15.2\n  Attempting uninstall: transformers\n    Found existing installation: transformers 4.38.2\n    Uninstalling transformers-4.38.2:\n      Successfully uninstalled transformers-4.38.2\nSuccessfully installed huggingface-hub-0.23.4 tokenizers-0.19.1 transformers-4.41.2\nRequirement already satisfied: accelerate in /opt/conda/lib/python3.10/site-packages (0.28.0)\nCollecting accelerate\n  Downloading accelerate-0.31.0-py3-none-any.whl.metadata (19 kB)\nRequirement already satisfied: numpy>=1.17 in /opt/conda/lib/python3.10/site-packages (from accelerate) (1.26.4)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from accelerate) (21.3)\nRequirement already satisfied: psutil in /opt/conda/lib/python3.10/site-packages (from accelerate) (5.9.3)\nRequirement already satisfied: pyyaml in /opt/conda/lib/python3.10/site-packages (from accelerate) (6.0.1)\nRequirement already satisfied: torch>=1.10.0 in /opt/conda/lib/python3.10/site-packages (from accelerate) (2.1.2)\nRequirement already satisfied: huggingface-hub in /opt/conda/lib/python3.10/site-packages (from accelerate) (0.23.4)\nRequirement already satisfied: safetensors>=0.3.1 in /opt/conda/lib/python3.10/site-packages (from accelerate) (0.4.2)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.0->accelerate) (3.1.1)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch>=1.10.0->accelerate) (3.13.1)\nRequirement already satisfied: typing-extensions in /opt/conda/lib/python3.10/site-packages (from torch>=1.10.0->accelerate) (4.9.0)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch>=1.10.0->accelerate) (1.12)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch>=1.10.0->accelerate) (3.2.1)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch>=1.10.0->accelerate) (3.1.2)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch>=1.10.0->accelerate) (2024.3.0)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from huggingface-hub->accelerate) (2.31.0)\nRequirement already satisfied: tqdm>=4.42.1 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub->accelerate) (4.66.1)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch>=1.10.0->accelerate) (2.1.3)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface-hub->accelerate) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface-hub->accelerate) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface-hub->accelerate) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface-hub->accelerate) (2024.2.2)\nRequirement already satisfied: mpmath>=0.19 in /opt/conda/lib/python3.10/site-packages (from sympy->torch>=1.10.0->accelerate) (1.3.0)\nDownloading accelerate-0.31.0-py3-none-any.whl (309 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m309.4/309.4 kB\u001b[0m \u001b[31m5.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[?25hInstalling collected packages: accelerate\n  Attempting uninstall: accelerate\n    Found existing installation: accelerate 0.28.0\n    Uninstalling accelerate-0.28.0:\n      Successfully uninstalled accelerate-0.28.0\nSuccessfully installed accelerate-0.31.0\nRequirement already satisfied: datasets in /opt/conda/lib/python3.10/site-packages (2.1.0)\nCollecting datasets\n  Downloading datasets-2.20.0-py3-none-any.whl.metadata (19 kB)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from datasets) (3.13.1)\nRequirement already satisfied: numpy>=1.17 in /opt/conda/lib/python3.10/site-packages (from datasets) (1.26.4)\nCollecting pyarrow>=15.0.0 (from datasets)\n  Downloading pyarrow-16.1.0-cp310-cp310-manylinux_2_28_x86_64.whl.metadata (3.0 kB)\nCollecting pyarrow-hotfix (from datasets)\n  Downloading pyarrow_hotfix-0.6-py3-none-any.whl.metadata (3.6 kB)\nRequirement already satisfied: dill<0.3.9,>=0.3.0 in /opt/conda/lib/python3.10/site-packages (from datasets) (0.3.8)\nRequirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (from datasets) (2.1.4)\nCollecting requests>=2.32.2 (from datasets)\n  Downloading requests-2.32.3-py3-none-any.whl.metadata (4.6 kB)\nCollecting tqdm>=4.66.3 (from datasets)\n  Downloading tqdm-4.66.4-py3-none-any.whl.metadata (57 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m57.6/57.6 kB\u001b[0m \u001b[31m2.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hRequirement already satisfied: xxhash in /opt/conda/lib/python3.10/site-packages (from datasets) (3.4.1)\nRequirement already satisfied: multiprocess in /opt/conda/lib/python3.10/site-packages (from datasets) (0.70.16)\nRequirement already satisfied: fsspec<=2024.5.0,>=2023.1.0 in /opt/conda/lib/python3.10/site-packages (from fsspec[http]<=2024.5.0,>=2023.1.0->datasets) (2024.3.0)\nRequirement already satisfied: aiohttp in /opt/conda/lib/python3.10/site-packages (from datasets) (3.9.1)\nRequirement already satisfied: huggingface-hub>=0.21.2 in /opt/conda/lib/python3.10/site-packages (from datasets) (0.23.4)\nRequirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from datasets) (21.3)\nRequirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from datasets) (6.0.1)\nRequirement already satisfied: attrs>=17.3.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets) (23.2.0)\nRequirement already satisfied: multidict<7.0,>=4.5 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets) (6.0.4)\nRequirement already satisfied: yarl<2.0,>=1.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets) (1.9.3)\nRequirement already satisfied: frozenlist>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets) (1.4.1)\nRequirement already satisfied: aiosignal>=1.1.2 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets) (1.3.1)\nRequirement already satisfied: async-timeout<5.0,>=4.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets) (4.0.3)\nRequirement already satisfied: typing-extensions>=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.21.2->datasets) (4.9.0)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->datasets) (3.1.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests>=2.32.2->datasets) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests>=2.32.2->datasets) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests>=2.32.2->datasets) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests>=2.32.2->datasets) (2024.2.2)\nRequirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas->datasets) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas->datasets) (2023.3.post1)\nRequirement already satisfied: tzdata>=2022.1 in /opt/conda/lib/python3.10/site-packages (from pandas->datasets) (2023.4)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas->datasets) (1.16.0)\nDownloading datasets-2.20.0-py3-none-any.whl (547 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m547.8/547.8 kB\u001b[0m \u001b[31m12.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading pyarrow-16.1.0-cp310-cp310-manylinux_2_28_x86_64.whl (40.8 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m40.8/40.8 MB\u001b[0m \u001b[31m37.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading requests-2.32.3-py3-none-any.whl (64 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m64.9/64.9 kB\u001b[0m \u001b[31m3.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading tqdm-4.66.4-py3-none-any.whl (78 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m78.3/78.3 kB\u001b[0m \u001b[31m5.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading pyarrow_hotfix-0.6-py3-none-any.whl (7.9 kB)\nInstalling collected packages: tqdm, requests, pyarrow-hotfix, pyarrow, datasets\n  Attempting uninstall: tqdm\n    Found existing installation: tqdm 4.66.1\n    Uninstalling tqdm-4.66.1:\n      Successfully uninstalled tqdm-4.66.1\n  Attempting uninstall: requests\n    Found existing installation: requests 2.31.0\n    Uninstalling requests-2.31.0:\n      Successfully uninstalled requests-2.31.0\n  Attempting uninstall: pyarrow\n    Found existing installation: pyarrow 11.0.0\n    Uninstalling pyarrow-11.0.0:\n      Successfully uninstalled pyarrow-11.0.0\n  Attempting uninstall: datasets\n    Found existing installation: datasets 2.1.0\n    Uninstalling datasets-2.1.0:\n      Successfully uninstalled datasets-2.1.0\n\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\ncudf 23.8.0 requires cubinlinker, which is not installed.\ncudf 23.8.0 requires cupy-cuda11x>=12.0.0, which is not installed.\ncudf 23.8.0 requires ptxcompiler, which is not installed.\ncuml 23.8.0 requires cupy-cuda11x>=12.0.0, which is not installed.\ndask-cudf 23.8.0 requires cupy-cuda11x>=12.0.0, which is not installed.\nkeras-cv 0.8.2 requires keras-core, which is not installed.\nkeras-nlp 0.8.2 requires keras-core, which is not installed.\ntensorflow-decision-forests 1.8.1 requires wurlitzer, which is not installed.\napache-beam 2.46.0 requires dill<0.3.2,>=0.3.1.1, but you have dill 0.3.8 which is incompatible.\napache-beam 2.46.0 requires numpy<1.25.0,>=1.14.3, but you have numpy 1.26.4 which is incompatible.\napache-beam 2.46.0 requires pyarrow<10.0.0,>=3.0.0, but you have pyarrow 16.1.0 which is incompatible.\nbeatrix-jupyterlab 2023.128.151533 requires jupyterlab~=3.6.0, but you have jupyterlab 4.1.5 which is incompatible.\ncudf 23.8.0 requires cuda-python<12.0a0,>=11.7.1, but you have cuda-python 12.4.0 which is incompatible.\ncudf 23.8.0 requires pandas<1.6.0dev0,>=1.3, but you have pandas 2.1.4 which is incompatible.\ncudf 23.8.0 requires protobuf<5,>=4.21, but you have protobuf 3.20.3 which is incompatible.\ncudf 23.8.0 requires pyarrow==11.*, but you have pyarrow 16.1.0 which is incompatible.\ncuml 23.8.0 requires dask==2023.7.1, but you have dask 2024.3.1 which is incompatible.\ndask-cudf 23.8.0 requires dask==2023.7.1, but you have dask 2024.3.1 which is incompatible.\ndask-cudf 23.8.0 requires pandas<1.6.0dev0,>=1.3, but you have pandas 2.1.4 which is incompatible.\ngcsfs 2023.12.2.post1 requires fsspec==2023.12.2, but you have fsspec 2024.3.0 which is incompatible.\ngoogle-cloud-aiplatform 0.6.0a1 requires google-api-core[grpc]<2.0.0dev,>=1.22.2, but you have google-api-core 2.11.1 which is incompatible.\ngoogle-cloud-automl 1.0.1 requires google-api-core[grpc]<2.0.0dev,>=1.14.0, but you have google-api-core 2.11.1 which is incompatible.\ngoogle-cloud-pubsub 2.19.0 requires grpcio<2.0dev,>=1.51.3, but you have grpcio 1.51.1 which is incompatible.\nkfp 2.5.0 requires google-cloud-storage<3,>=2.2.1, but you have google-cloud-storage 1.44.0 which is incompatible.\nlibpysal 4.9.2 requires packaging>=22, but you have packaging 21.3 which is incompatible.\nlibpysal 4.9.2 requires shapely>=2.0.1, but you have shapely 1.8.5.post1 which is incompatible.\nmomepy 0.7.0 requires shapely>=2, but you have shapely 1.8.5.post1 which is incompatible.\nosmnx 1.9.1 requires shapely>=2.0, but you have shapely 1.8.5.post1 which is incompatible.\nspopt 0.6.0 requires shapely>=2.0.1, but you have shapely 1.8.5.post1 which is incompatible.\ntensorflow 2.15.0 requires keras<2.16,>=2.15.0, but you have keras 3.0.5 which is incompatible.\nydata-profiling 4.6.4 requires numpy<1.26,>=1.16.0, but you have numpy 1.26.4 which is incompatible.\u001b[0m\u001b[31m\n\u001b[0mSuccessfully installed datasets-2.20.0 pyarrow-16.1.0 pyarrow-hotfix-0.6 requests-2.32.3 tqdm-4.66.4\n","output_type":"stream"}]},{"cell_type":"code","source":"from datasets import Dataset, DatasetDict\n","metadata":{"id":"Y1FNvrp5BWZw","execution":{"iopub.status.busy":"2024-06-19T10:21:16.243099Z","iopub.execute_input":"2024-06-19T10:21:16.243929Z","iopub.status.idle":"2024-06-19T10:21:18.052263Z","shell.execute_reply.started":"2024-06-19T10:21:16.243887Z","shell.execute_reply":"2024-06-19T10:21:18.051167Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\ntrain_df=pd.read_csv('/kaggle/input/new-final/new_final_train_data_with_null.csv')\nval_df=pd.read_csv('/kaggle/input/validation-transformer/valid.csv')\ntest_df=pd.read_csv('/kaggle/input/new-final/new_final_test_data_with_null.csv')\ntrain_lst=[]\ntrain_lst1=[]\nval_lst=[]\nval_lst1=[]\ntest_lst=[]\ntest_lst1=[]\nfor i in train_df['Sentences']:\n  train_lst.append(i.split())\nfor i in train_df['Labels']:\n  train_lst1.append(eval(i))\nfor i in val_df['Sentences']:\n  val_lst.append(i.split())\nfor i in val_df['Labels']:\n  val_lst1.append(list(i))\nfor i in test_df['Sentences']:\n  test_lst.append(i.split())\nfor i in test_df['Labels']:\n  test_lst1.append(eval(i))\nfor i in range(len(train_lst1)):\n  for j in range(len(train_lst1[i])):\n    if train_lst1[i][j]=='B':\n      train_lst1[i][j]=0\n    if train_lst1[i][j]=='I':\n      train_lst1[i][j]=1\n    if train_lst1[i][j]=='O':\n      train_lst1[i][j]=2\nfor i in range(len(val_lst1)):\n  for j in range(len(val_lst1[i])):\n    if val_lst1[i][j]=='B':\n      val_lst1[i][j]=0\n    if val_lst1[i][j]=='I':\n      val_lst1[i][j]=1\n    if val_lst1[i][j]=='O':\n      val_lst1[i][j]=2\nfor i in range(len(test_lst1)):\n  for j in range(len(test_lst1[i])):\n    if test_lst1[i][j]=='B':\n      test_lst1[i][j]=0\n    if test_lst1[i][j]=='I':\n      test_lst1[i][j]=1\n    if test_lst1[i][j]=='O':\n      test_lst1[i][j]=2\ntrain_df['Sentences']=train_lst\ntrain_df['Labels']=train_lst1\nval_df['Sentences']=val_lst\nval_df['Labels']=val_lst1\ntest_df['Sentences']=test_lst\ntest_df['Labels']=test_lst1\n\n\ndataset1 = Dataset.from_pandas(train_df)\ndataset2 = Dataset.from_pandas(val_df)\ndataset3 = Dataset.from_pandas(test_df)\n\n# Create a dictionary with split names as keys and Dataset objects as values\nsplits = {'train': dataset1, 'validation': dataset2, 'test': dataset3}\n\n# Create a DatasetDict\ndataa= DatasetDict(splits)\n\n# Print the information about the created DatasetDict\nprint(dataa)\n","metadata":{"id":"-VU_zc0KIuI1","colab":{"base_uri":"https://localhost:8080/"},"outputId":"9264fb75-421b-4cff-eeb8-cec23134ed39","execution":{"iopub.status.busy":"2024-06-19T10:21:18.054109Z","iopub.execute_input":"2024-06-19T10:21:18.054841Z","iopub.status.idle":"2024-06-19T10:21:18.484487Z","shell.execute_reply.started":"2024-06-19T10:21:18.054800Z","shell.execute_reply":"2024-06-19T10:21:18.483494Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"DatasetDict({\n    train: Dataset({\n        features: ['Sentences', 'aspect terms', 'Labels'],\n        num_rows: 5056\n    })\n    validation: Dataset({\n        features: ['Sentences', 'Labels'],\n        num_rows: 847\n    })\n    test: Dataset({\n        features: ['Sentences', 'aspect terms', 'Labels'],\n        num_rows: 1265\n    })\n})\n","output_type":"stream"}]},{"cell_type":"code","source":"data = DatasetDict({\n    \"train\": dataa[\"train\"].remove_columns(\"aspect terms\"),\n    \"test\": dataa[\"test\"].remove_columns(\"aspect terms\")\n})","metadata":{"id":"i-WCmMHwKudB","execution":{"iopub.status.busy":"2024-06-19T10:21:18.486794Z","iopub.execute_input":"2024-06-19T10:21:18.487160Z","iopub.status.idle":"2024-06-19T10:21:18.495414Z","shell.execute_reply.started":"2024-06-19T10:21:18.487132Z","shell.execute_reply":"2024-06-19T10:21:18.494323Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":"## Model Building","metadata":{"id":"_R6pSKOpxaKm"}},{"cell_type":"markdown","source":"### Tokenization","metadata":{"id":"-1WV1YSXG8LT"}},{"cell_type":"code","source":"# Tokenizer and model loading\nfrom transformers import T5TokenizerFast, T5ForConditionalGeneration\n\nmodel_checkpoint = \"google/flan-t5-large\"\ntokenizer = T5TokenizerFast.from_pretrained(model_checkpoint)\nmodel = T5ForConditionalGeneration.from_pretrained(model_checkpoint)","metadata":{"id":"J-bAdfCnItnr","colab":{"base_uri":"https://localhost:8080/","height":311,"referenced_widgets":["a920b970920e43739c0bd62d19a688d5","df65a57a166b4471a54daa0226ba464a","4b73c70b327a449093eeacbf90bd2c27","c1ddd1c687ac44619f07f37482d178e1","3d5e4bb5c7a14f0a99719bff08899bf7","a55c1850bd5c4130a346f3ede97e5223","d2b0a65863e34d4daf0ae6db169e1796","2c963cb539794e76bbf3fea950642add","d0057a9408ec4eeb88109a82f057053c","2cbb18f1c8284a8988bc33f6e2d6436a","be5ed15b3cca45528f42b3aef50341c1","1fec487973a24f6395fa9a426dda8af1","dfb8c1f490dc47528f7c2f87940b0850","5292fd5fd83f48979d3c961fd2916faf","ce8aa189946a4ea78bfd772b72becba0","29dbc1f9e472495284819cbf8ceee029","a1bd7729d2144337acd179496d75fa42","d0ecf66587ac4ebaa92107b062313a34","695bd7f3450944a2910b2ed1d19c4f18","f30b12c0d1a84a5782a2385f0b80768e","9037a6b51aa3445bba3667c69b563e60","d036b6d4b99a41fb86bc0f35e7f5e86a","862044f96fb94b739bd64172a98feaa3","bab71454dbb14053be8aba6a648741c1","a0171aeb0b594deeb204b244aa75b7df","d01337b2bb00428e8137d0bec6b0961f","b18f7365ca224fdc82d701a859a27b9e","137d37c638644ce5a9a455b45c91a768","43d1a15808a948a09bf172c857dab917","b3d46ea5b0084c74af593425e9e58845","77d20d31698649b88e2710906c01d88a","1e7dda02d55541bebc95cbe5601f9a40","67639b359af94c58ae9135b5e75bd634","b73632f6ed61435fa24e68fe82204de2","297000a455904523bf3e8ae205fc0001","d08acfce63d944e3942b931b0c089277","f4cad3606d744750b795ed833d2c2b18","db9c9f99dc024906a0c27ea7706f6b5e","45d171a6b8ae4b5e9e2740f097b43799","f930bfd1f68c4dd6965d295462a1e2ea","d4144a08691548c98c15ce8495253bfc","f62a1e79ab98406e9f84d9f0bf81e96a","1dae96d9abf04bbaa31c86cbfd23ae4a","5a7b1d05016245498d432668f382089c"]},"outputId":"8f1f3c2a-9fb5-455c-e38b-01ecdf4b9a47","execution":{"iopub.status.busy":"2024-06-19T10:21:18.496782Z","iopub.execute_input":"2024-06-19T10:21:18.497135Z","iopub.status.idle":"2024-06-19T10:21:47.215020Z","shell.execute_reply.started":"2024-06-19T10:21:18.497097Z","shell.execute_reply":"2024-06-19T10:21:47.214077Z"},"trusted":true},"execution_count":5,"outputs":[{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/2.54k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"634bff9dc8394d7fbb54e37cb311b99c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"spiece.model:   0%|          | 0.00/792k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"86b8c8d3bd1b4e368ed3ebca81f5ecfa"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/2.42M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f1a3343f0f434fcc8f8b5b49de5d09ae"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"special_tokens_map.json:   0%|          | 0.00/2.20k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"20481ebdb307440bb908b88183d3aa13"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/662 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"07013ffa917c4619b286e36dcd875043"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/3.13G [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"fa235d0dbee0438dbc0bd04b455f48e8"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"generation_config.json:   0%|          | 0.00/147 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"382799b999e44c31936263b9ff897c66"}},"metadata":{}}]},{"cell_type":"code","source":"tokenizer.is_fast","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aW1516RoItlL","outputId":"6652b17b-0b50-460a-b5c0-453a1e39648d","execution":{"iopub.status.busy":"2024-06-19T10:25:20.361197Z","iopub.execute_input":"2024-06-19T10:25:20.361922Z","iopub.status.idle":"2024-06-19T10:25:20.368422Z","shell.execute_reply.started":"2024-06-19T10:25:20.361883Z","shell.execute_reply":"2024-06-19T10:25:20.367412Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"True"},"metadata":{}}]},{"cell_type":"code","source":"inputs = data['train'][75]['Sentences']\ninputs = tokenizer(inputs, is_split_into_words=True)\nprint(inputs.tokens())\n","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CbX65Vi1Itgx","outputId":"df558ef8-3e2e-4a17-936d-882735770e13","execution":{"iopub.status.busy":"2024-06-19T10:25:21.324666Z","iopub.execute_input":"2024-06-19T10:25:21.325447Z","iopub.status.idle":"2024-06-19T10:25:21.332439Z","shell.execute_reply.started":"2024-06-19T10:25:21.325412Z","shell.execute_reply":"2024-06-19T10:25:21.331373Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"['▁the', '▁antique', '▁shops', '▁are', '▁great', '▁to', '▁browse', '</s>']\n","output_type":"stream"}]},{"cell_type":"code","source":"# inputs.word_ids()\ninputs = data['train'][75]['Sentences']\ninputs = tokenizer(inputs, is_split_into_words=True)\nprint(inputs.word_ids)\n","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5UzgkZwkItXJ","outputId":"7ecf907c-cd02-48c6-933c-a15b480ad3c0","execution":{"iopub.status.busy":"2024-06-19T10:25:21.552457Z","iopub.execute_input":"2024-06-19T10:25:21.553260Z","iopub.status.idle":"2024-06-19T10:25:21.559505Z","shell.execute_reply.started":"2024-06-19T10:25:21.553226Z","shell.execute_reply":"2024-06-19T10:25:21.558346Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"<bound method BatchEncoding.word_ids of {'input_ids': [8, 11304, 5391, 33, 248, 12, 9708, 1], 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1]}>\n","output_type":"stream"}]},{"cell_type":"code","source":"# def align_labels_with_tokens(labels, word_ids):\n#   new_labels = []\n#   current_word=None\n#   for word_id in word_ids:\n#     if word_id != current_word:\n#       current_word = word_id\n#       label = -100 if word_id is None else labels[word_id]\n#       new_labels.append(label)\n\n#     elif word_id is None:\n#       new_labels.append(-100)\n\n#     else:\n#       label = labels[word_id]\n\n#       if label%2==1:\n#         label = label + 1\n#       new_labels.append(label)\n\n#   return new_labels\n\n\n# Tokenization and label alignment\ndef align_labels_with_tokens(labels, word_ids):\n    new_labels = []\n    current_word = None\n    for word_id in word_ids:\n        if word_id != current_word:\n            current_word = word_id\n            label = -100 if word_id is None else labels[word_id]\n            new_labels.append(label)\n        elif word_id is None:\n            new_labels.append(-100)\n        else:\n            label = labels[word_id]\n            if label % 2 == 1:\n                label = label + 1\n            new_labels.append(label)\n    return new_labels","metadata":{"id":"6oEGsiFRItNw","execution":{"iopub.status.busy":"2024-06-19T10:25:21.916529Z","iopub.execute_input":"2024-06-19T10:25:21.917244Z","iopub.status.idle":"2024-06-19T10:25:21.926609Z","shell.execute_reply.started":"2024-06-19T10:25:21.917192Z","shell.execute_reply":"2024-06-19T10:25:21.925363Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"def tokenize_and_align_labels(examples):\n    tokenized_inputs = tokenizer(examples['Sentences'], truncation=True, is_split_into_words=True)\n    all_labels = examples['Labels']\n    new_labels = []\n    for i, labels in enumerate(all_labels):\n        word_ids = tokenized_inputs.word_ids(i)\n        new_labels.append(align_labels_with_tokens(labels, word_ids))\n    tokenized_inputs['labels'] = new_labels\n    return tokenized_inputs\n","metadata":{"id":"TeNuICvZ7753","execution":{"iopub.status.busy":"2024-06-19T10:25:22.288885Z","iopub.execute_input":"2024-06-19T10:25:22.289790Z","iopub.status.idle":"2024-06-19T10:25:22.295942Z","shell.execute_reply.started":"2024-06-19T10:25:22.289755Z","shell.execute_reply":"2024-06-19T10:25:22.294821Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"tokenized_datasets = data.map(tokenize_and_align_labels, batched=True, remove_columns=data['train'].column_names)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":330,"referenced_widgets":["2a2bb0e2808d4975a628abe170b4d187","5a788c7c0173480383c5cea9bfcda6f2","8901d5bd59a548b698d39fb27fe641ab","5513f880260e43a497c350a8ead14649","8a8ae4186eb84076b81877d0fbae2a8e","3ea9907bf8a5465d8a61b31412a947ad","26a19f1c3a8b4bf2a4553e76302f5b32","ea6056278b2844d4b3965680ae12fb77","6527b24a6e8e4475aa4256e62fa94315","52d825741f894f1588997b58fd074bf0","9766278a7d444e60821b89924ecee0b1"]},"id":"GAOYMNpbIw0V","outputId":"ef1950a3-d1bd-4457-e007-b018ce629b9e","execution":{"iopub.status.busy":"2024-06-19T10:25:22.999030Z","iopub.execute_input":"2024-06-19T10:25:22.999729Z","iopub.status.idle":"2024-06-19T10:25:23.758657Z","shell.execute_reply.started":"2024-06-19T10:25:22.999694Z","shell.execute_reply":"2024-06-19T10:25:23.757592Z"},"trusted":true},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/5056 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5fc70575d9704f53a069d4ae7695d54c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/1265 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"081080d2a8da457299c9fe12639b06d8"}},"metadata":{}}]},{"cell_type":"code","source":"tokenized_datasets","metadata":{"id":"BsdcAUIAIwxY","execution":{"iopub.status.busy":"2024-06-19T10:25:23.760930Z","iopub.execute_input":"2024-06-19T10:25:23.761676Z","iopub.status.idle":"2024-06-19T10:25:23.768765Z","shell.execute_reply.started":"2024-06-19T10:25:23.761635Z","shell.execute_reply":"2024-06-19T10:25:23.767743Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"DatasetDict({\n    train: Dataset({\n        features: ['input_ids', 'attention_mask', 'labels'],\n        num_rows: 5056\n    })\n    test: Dataset({\n        features: ['input_ids', 'attention_mask', 'labels'],\n        num_rows: 1265\n    })\n})"},"metadata":{}}]},{"cell_type":"markdown","source":"### Data Collation and Metrics","metadata":{"id":"LS0Igzg2G2JU"}},{"cell_type":"code","source":"from transformers import DataCollatorForTokenClassification\n\ndata_collator = DataCollatorForTokenClassification(tokenizer=tokenizer)","metadata":{"id":"9JFTWkBkIwrH","execution":{"iopub.status.busy":"2024-06-19T10:25:25.035753Z","iopub.execute_input":"2024-06-19T10:25:25.036151Z","iopub.status.idle":"2024-06-19T10:25:38.445099Z","shell.execute_reply.started":"2024-06-19T10:25:25.036122Z","shell.execute_reply":"2024-06-19T10:25:38.444033Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stderr","text":"2024-06-19 10:25:28.046632: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-06-19 10:25:28.046759: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-06-19 10:25:28.190842: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"code","source":"batch = data_collator([tokenized_datasets['train'][i] for i in range(2)])\nbatch","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":165},"id":"iQXD_vzAIwoI","outputId":"38d643c3-311e-49d5-ef90-1b03d5ab2be3","execution":{"iopub.status.busy":"2024-06-19T10:25:38.447228Z","iopub.execute_input":"2024-06-19T10:25:38.448625Z","iopub.status.idle":"2024-06-19T10:25:38.466199Z","shell.execute_reply.started":"2024-06-19T10:25:38.448579Z","shell.execute_reply":"2024-06-19T10:25:38.465068Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"{'input_ids': tensor([[   79,   128,   310,  1477, 14432,    84,    33,  1728,    59,   435,\n            16,   119,  9307,    16, 18222,     1],\n        [   25,    43,    12,   240,     3,     9,  4142,    12,   281,    21,\n             8,   903,   500,     1,     0,     0]]), 'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0]]), 'labels': tensor([[   2,    2,    2,    2,    0,    2,    2,    2,    2,    2,    2,    2,\n            2,    2,    2, -100],\n        [   2,    2,    2,    2,    2,    2,    0,    2,    2,    2,    2,    2,\n            2, -100, -100, -100]])}"},"metadata":{}}]},{"cell_type":"markdown","source":"### Metrics","metadata":{"id":"60-H29Z0H7Ix"}},{"cell_type":"code","source":"!pip install seqeval\n!pip install evaluate\n\nimport evaluate\nmetric = evaluate.load('seqeval')","metadata":{"id":"1l-te4qYIwlJ","colab":{"base_uri":"https://localhost:8080/","height":998,"referenced_widgets":["72c09a8b45054328a07b0dadd2258b19","c59bf51f77f64b55a079576d744b7ba0","f1a04b3f983a4b0591b447b2c35fbf9a","82302423beaa40e380df5643ab1f53f4","731cae54d4f740e9841f8556fa5aaa33","2df5f59568574dee9302e504be8ecd15","5aa89db5a7ce4e8d81307d4cb52367c8","aa047d9781f74444b3e34edf7203e104","c660c7638f594bc7a2e841b02307a562","9137c77338d444d5a31db3475faaba6f","017f96fbd45f4246853b70d1442dafc3"]},"outputId":"1512902a-a1ed-459d-b195-00610662e3f6","execution":{"iopub.status.busy":"2024-06-19T10:25:42.391765Z","iopub.execute_input":"2024-06-19T10:25:42.392188Z","iopub.status.idle":"2024-06-19T10:26:15.233266Z","shell.execute_reply.started":"2024-06-19T10:25:42.392155Z","shell.execute_reply":"2024-06-19T10:26:15.232251Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stderr","text":"huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n","output_type":"stream"},{"name":"stdout","text":"Collecting seqeval\n  Downloading seqeval-1.2.2.tar.gz (43 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m43.6/43.6 kB\u001b[0m \u001b[31m1.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25ldone\n\u001b[?25hRequirement already satisfied: numpy>=1.14.0 in /opt/conda/lib/python3.10/site-packages (from seqeval) (1.26.4)\nRequirement already satisfied: scikit-learn>=0.21.3 in /opt/conda/lib/python3.10/site-packages (from seqeval) (1.2.2)\nRequirement already satisfied: scipy>=1.3.2 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.21.3->seqeval) (1.11.4)\nRequirement already satisfied: joblib>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.21.3->seqeval) (1.3.2)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.21.3->seqeval) (3.2.0)\nRequirement already satisfied: scipy>=1.3.2 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.21.3->seqeval) (1.11.4)\nRequirement already satisfied: joblib>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.21.3->seqeval) (1.3.2)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.21.3->seqeval) (3.2.0)\nBuilding wheels for collected packages: seqeval\n  Building wheel for seqeval (setup.py) ... \u001b[?25ldone\n\u001b[?25h  Created wheel for seqeval: filename=seqeval-1.2.2-py3-none-any.whl size=16162 sha256=2bf7bfb78afc548c22c9ea63b78c5fbeb15a6dbcfbb2ff7374392407755b047b\n  Stored in directory: /root/.cache/pip/wheels/1a/67/4a/ad4082dd7dfc30f2abfe4d80a2ed5926a506eb8a972b4767fa\nSuccessfully built seqeval\nInstalling collected packages: seqeval\nSuccessfully installed seqeval-1.2.2\n","output_type":"stream"},{"name":"stderr","text":"huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n","output_type":"stream"},{"name":"stdout","text":"Collecting evaluate\n  Downloading evaluate-0.4.2-py3-none-any.whl.metadata (9.3 kB)\nRequirement already satisfied: datasets>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from evaluate) (2.20.0)\nRequirement already satisfied: numpy>=1.17 in /opt/conda/lib/python3.10/site-packages (from evaluate) (1.26.4)\nRequirement already satisfied: dill in /opt/conda/lib/python3.10/site-packages (from evaluate) (0.3.8)\nRequirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (from evaluate) (2.1.4)\nRequirement already satisfied: requests>=2.19.0 in /opt/conda/lib/python3.10/site-packages (from evaluate) (2.32.3)\nRequirement already satisfied: tqdm>=4.62.1 in /opt/conda/lib/python3.10/site-packages (from evaluate) (4.66.4)\nRequirement already satisfied: xxhash in /opt/conda/lib/python3.10/site-packages (from evaluate) (3.4.1)\nRequirement already satisfied: multiprocess in /opt/conda/lib/python3.10/site-packages (from evaluate) (0.70.16)\nRequirement already satisfied: fsspec>=2021.05.0 in /opt/conda/lib/python3.10/site-packages (from fsspec[http]>=2021.05.0->evaluate) (2024.3.0)\nRequirement already satisfied: huggingface-hub>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from evaluate) (0.23.4)\nRequirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from evaluate) (21.3)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from datasets>=2.0.0->evaluate) (3.13.1)\nRequirement already satisfied: pyarrow>=15.0.0 in /opt/conda/lib/python3.10/site-packages (from datasets>=2.0.0->evaluate) (16.1.0)\nRequirement already satisfied: pyarrow-hotfix in /opt/conda/lib/python3.10/site-packages (from datasets>=2.0.0->evaluate) (0.6)\nRequirement already satisfied: aiohttp in /opt/conda/lib/python3.10/site-packages (from datasets>=2.0.0->evaluate) (3.9.1)\nRequirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from datasets>=2.0.0->evaluate) (6.0.1)\nRequirement already satisfied: typing-extensions>=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.7.0->evaluate) (4.9.0)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->evaluate) (3.1.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->evaluate) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->evaluate) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->evaluate) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->evaluate) (2024.2.2)\nRequirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas->evaluate) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas->evaluate) (2023.3.post1)\nRequirement already satisfied: tzdata>=2022.1 in /opt/conda/lib/python3.10/site-packages (from pandas->evaluate) (2023.4)\nRequirement already satisfied: attrs>=17.3.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets>=2.0.0->evaluate) (23.2.0)\nRequirement already satisfied: multidict<7.0,>=4.5 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets>=2.0.0->evaluate) (6.0.4)\nRequirement already satisfied: yarl<2.0,>=1.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets>=2.0.0->evaluate) (1.9.3)\nRequirement already satisfied: frozenlist>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets>=2.0.0->evaluate) (1.4.1)\nRequirement already satisfied: aiosignal>=1.1.2 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets>=2.0.0->evaluate) (1.3.1)\nRequirement already satisfied: async-timeout<5.0,>=4.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets>=2.0.0->evaluate) (4.0.3)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas->evaluate) (1.16.0)\nDownloading evaluate-0.4.2-py3-none-any.whl (84 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m84.1/84.1 kB\u001b[0m \u001b[31m1.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[?25hInstalling collected packages: evaluate\nSuccessfully installed evaluate-0.4.2\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Downloading builder script:   0%|          | 0.00/6.34k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"2952271b92e34792a40b4a8f868ae31d"}},"metadata":{}}]},{"cell_type":"code","source":"label_names = ['B','I','O']\nlabel_names","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gMMpHGUMIwfJ","outputId":"c808886c-2b1b-45a1-a952-d9784d8aa017","execution":{"iopub.status.busy":"2024-06-19T10:26:15.235168Z","iopub.execute_input":"2024-06-19T10:26:15.235951Z","iopub.status.idle":"2024-06-19T10:26:15.243105Z","shell.execute_reply.started":"2024-06-19T10:26:15.235913Z","shell.execute_reply":"2024-06-19T10:26:15.241899Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"['B', 'I', 'O']"},"metadata":{}}]},{"cell_type":"code","source":"labels = data['train'][0]['Labels']\nlabels = [label_names[i] for i in labels]\nlabels","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6844wG9BIwb8","outputId":"4fecec39-b335-4f52-bfa8-2d65d9aeaa32","execution":{"iopub.status.busy":"2024-06-19T10:26:15.244441Z","iopub.execute_input":"2024-06-19T10:26:15.244794Z","iopub.status.idle":"2024-06-19T10:26:15.257418Z","shell.execute_reply.started":"2024-06-19T10:26:15.244766Z","shell.execute_reply":"2024-06-19T10:26:15.256297Z"},"trusted":true},"execution_count":18,"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"['O', 'O', 'O', 'O', 'B', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']"},"metadata":{}}]},{"cell_type":"code","source":"predictions = labels.copy()\nprint(predictions)\npredictions[2] = \"O\"\n\nmetric.compute(predictions=[predictions], references=[labels])","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qVi3ULZAIwZE","outputId":"6b1b4dbd-7053-49e6-d999-b1b2849550fd","execution":{"iopub.status.busy":"2024-06-19T10:26:15.260293Z","iopub.execute_input":"2024-06-19T10:26:15.260694Z","iopub.status.idle":"2024-06-19T10:26:15.282859Z","shell.execute_reply.started":"2024-06-19T10:26:15.260659Z","shell.execute_reply":"2024-06-19T10:26:15.281848Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"['O', 'O', 'O', 'O', 'B', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']\n","output_type":"stream"},{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"{'_': {'precision': 1.0, 'recall': 1.0, 'f1': 1.0, 'number': 1},\n 'overall_precision': 1.0,\n 'overall_recall': 1.0,\n 'overall_f1': 1.0,\n 'overall_accuracy': 1.0}"},"metadata":{}}]},{"cell_type":"code","source":"y_pred=[]\ny_true=[]","metadata":{"id":"_UOkywTfLcnV","execution":{"iopub.status.busy":"2024-06-19T10:26:15.284360Z","iopub.execute_input":"2024-06-19T10:26:15.285483Z","iopub.status.idle":"2024-06-19T10:26:15.290268Z","shell.execute_reply.started":"2024-06-19T10:26:15.285411Z","shell.execute_reply":"2024-06-19T10:26:15.289029Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"# import numpy as np\n# from sklearn.metrics import classification_report, accuracy_score\n\n# def compute_metrics(eval_preds):\n#   global y_pred, y_true\n#   logits, labels = eval_preds\n\n#   predictions = np.argmax(logits, axis=-1)\n\n#   true_labels = [[label_names[l] for l in label if l!=-100] for label in labels]\n\n#   true_predictions = [[label_names[p] for p,l in zip(prediction, label) if l!=-100]\n#                       for prediction, label in zip(predictions, labels)]\n#   y_pred=true_predictions\n#   y_true=true_labels\n#   all_metrics = metric.compute(predictions=true_predictions, references=true_labels)\n#   y_true_flat = [label for sublist in y_true for label in sublist]\n#   y_pred_flat = [label for sublist in y_pred for label in sublist]\n\n#   accuracy = accuracy_score(y_true_flat, y_pred_flat)\n\n#   report = classification_report(y_true_flat, y_pred_flat)\n#   print(report)\n#   return {\"precision\": all_metrics['overall_precision'],\n#           \"recall\": all_metrics['overall_recall'],\n#           \"f1\": all_metrics['overall_f1'],\n#           \"accuracy\": all_metrics['overall_accuracy']}\n\n# Compute metrics function\nfrom sklearn.metrics import classification_report, accuracy_score\nimport numpy as np\n\ndef compute_metrics(eval_preds):\n    global y_pred, y_true\n    logits, labels = eval_preds\n    predictions = np.argmax(logits, axis=-1)\n    true_labels = [[label_names[l] for l in label if l != -100] for label in labels]\n    true_predictions = [[label_names[p] for p, l in zip(prediction, label) if l != -100] for prediction, label in zip(predictions, labels)]\n    y_pred = true_predictions\n    y_true = true_labels\n    all_metrics = metric.compute(predictions=true_predictions, references=true_labels)\n    y_true_flat = [label for sublist in y_true for label in sublist]\n    y_pred_flat = [label for sublist in y_pred for label in sublist]\n    accuracy = accuracy_score(y_true_flat, y_pred_flat)\n    report = classification_report(y_true_flat, y_pred_flat)\n    print(report)\n    return {\"precision\": all_metrics['overall_precision'],\n            \"recall\": all_metrics['overall_recall'],\n            \"f1\": all_metrics['overall_f1'],\n            \"accuracy\": all_metrics['overall_accuracy']}","metadata":{"id":"XVv1jBMoItKm","execution":{"iopub.status.busy":"2024-06-19T10:26:16.780638Z","iopub.execute_input":"2024-06-19T10:26:16.781169Z","iopub.status.idle":"2024-06-19T10:26:16.792239Z","shell.execute_reply.started":"2024-06-19T10:26:16.781141Z","shell.execute_reply":"2024-06-19T10:26:16.791187Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"markdown","source":"### Model Training","metadata":{"id":"FtlxXpJrLLTD"}},{"cell_type":"code","source":"id2label = {i:label for i, label in enumerate(label_names)}\nlabel2id = {label:i for i, label in enumerate(label_names)}","metadata":{"id":"Eq3aw8ejLby4","execution":{"iopub.status.busy":"2024-06-19T10:26:16.793390Z","iopub.execute_input":"2024-06-19T10:26:16.793687Z","iopub.status.idle":"2024-06-19T10:26:16.804406Z","shell.execute_reply.started":"2024-06-19T10:26:16.793661Z","shell.execute_reply":"2024-06-19T10:26:16.803388Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"print(id2label)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5hZfQ5yFItEJ","outputId":"d953d9e5-31b9-496c-8c85-11bd100c3822","execution":{"iopub.status.busy":"2024-06-19T10:26:16.805710Z","iopub.execute_input":"2024-06-19T10:26:16.806073Z","iopub.status.idle":"2024-06-19T10:26:16.815561Z","shell.execute_reply.started":"2024-06-19T10:26:16.806034Z","shell.execute_reply":"2024-06-19T10:26:16.814367Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stdout","text":"{0: 'B', 1: 'I', 2: 'O'}\n","output_type":"stream"}]},{"cell_type":"code","source":"from transformers import AutoModelForTokenClassification\n\nmodel = AutoModelForTokenClassification.from_pretrained(\n                                                    model_checkpoint,\n                                                    id2label=id2label,\n                                                    label2id=label2id)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":140,"referenced_widgets":["12294cd9aa374777ace13f5dfc98090e","3ca532faca104fc597a10ebd3083bba3","2c76626366d54000849a07024148e236","e6485771fb52421f8a371c22924096d5","f0fb9ff3798f4abab86fb66b5e20c456","e3cebcc890a34ead94e5022c2c226a1f","23f55ab3fb0d48e4b4cf481b3010bd4c","618f6e0466bf4b9c9fedd63fa5a2de62","d586b68abc834adf8c608f2cf68b6ec9","c43273796880453f88cc682dbac699b5","4e832deb4896487f81fbf853cb11ec2c"]},"id":"XlzhnvE8ItHW","outputId":"524f2290-b510-4c86-bdef-dfd6d1b64ece","execution":{"iopub.status.busy":"2024-06-19T10:26:16.817000Z","iopub.execute_input":"2024-06-19T10:26:16.817458Z","iopub.status.idle":"2024-06-19T10:26:18.170990Z","shell.execute_reply.started":"2024-06-19T10:26:16.817423Z","shell.execute_reply":"2024-06-19T10:26:18.169778Z"},"trusted":true},"execution_count":29,"outputs":[{"name":"stderr","text":"Some weights of T5ForTokenClassification were not initialized from the model checkpoint at google/flan-t5-large and are newly initialized: ['classifier.bias', 'classifier.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n","output_type":"stream"}]},{"cell_type":"code","source":"model.config.num_labels","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EX-7RAR9ItAu","outputId":"49f344f2-ed5c-4832-c133-fb1d68c0f065","execution":{"iopub.status.busy":"2024-06-19T10:26:18.172476Z","iopub.execute_input":"2024-06-19T10:26:18.172796Z","iopub.status.idle":"2024-06-19T10:26:18.179321Z","shell.execute_reply.started":"2024-06-19T10:26:18.172769Z","shell.execute_reply":"2024-06-19T10:26:18.178283Z"},"trusted":true},"execution_count":30,"outputs":[{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"3"},"metadata":{}}]},{"cell_type":"code","source":"# from transformers import TrainingArguments\n\n# args = TrainingArguments(\"bert-finetuned-ner\",\n#                          evaluation_strategy = \"epoch\",\n#                          save_strategy=\"epoch\",\n#                          learning_rate = 2.7e-5,\n#                          num_train_epochs=10,\n#                          weight_decay=0.01)\n\n# Training arguments and trainer with early stopping\nfrom transformers import TrainingArguments, Trainer, EarlyStoppingCallback\n\nargs = TrainingArguments(\n    \"flan-t5-finetuned-ner\",\n    evaluation_strategy=\"epoch\",\n    save_strategy=\"epoch\",\n    learning_rate=2.7e-5,\n    num_train_epochs=15,\n    weight_decay=0.01,\n    logging_steps=10,\n    load_best_model_at_end=True\n)","metadata":{"id":"hctLXNVbL_X4","execution":{"iopub.status.busy":"2024-06-19T10:26:23.771214Z","iopub.execute_input":"2024-06-19T10:26:23.771939Z","iopub.status.idle":"2024-06-19T10:26:23.866074Z","shell.execute_reply.started":"2024-06-19T10:26:23.771906Z","shell.execute_reply":"2024-06-19T10:26:23.864959Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/training_args.py:1474: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"code","source":"# from transformers import Trainer\n# trainer = Trainer(model=model,\n#                   args=args,\n#                   train_dataset = tokenized_datasets['train'],\n#                   eval_dataset = tokenized_datasets['test'],\n#                   data_collator=data_collator,\n#                   compute_metrics=compute_metrics,\n#                   tokenizer=tokenizer)\n\n# trainer.train()\n\ntrainer = Trainer(\n    model=model,\n    args=args,\n    train_dataset=tokenized_datasets['train'],\n    eval_dataset=tokenized_datasets['test'],\n    data_collator=data_collator,\n    compute_metrics=compute_metrics,\n    tokenizer=tokenizer,\n    callbacks=[EarlyStoppingCallback(early_stopping_patience=3)]  # Early stopping callback\n)\n\n# Train the model\ntrainer.train()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"PBPpmYZPL_Sa","outputId":"e1d8b161-0c96-412b-b88f-14896721dc79","execution":{"iopub.status.busy":"2024-06-19T10:26:29.371607Z","iopub.execute_input":"2024-06-19T10:26:29.372299Z","iopub.status.idle":"2024-06-19T10:46:39.702133Z","shell.execute_reply.started":"2024-06-19T10:26:29.372261Z","shell.execute_reply":"2024-06-19T10:46:39.700530Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stderr","text":"\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m The `run_name` is currently set to the same value as `TrainingArguments.output_dir`. If this was not intended, please specify a different run name by setting the `TrainingArguments.run_name` parameter.\n\u001b[34m\u001b[1mwandb\u001b[0m: Logging into wandb.ai. (Learn how to deploy a W&B server locally: https://wandb.me/wandb-server)\n\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n\u001b[34m\u001b[1mwandb\u001b[0m: Paste an API key from your profile and hit enter, or press ctrl+c to quit:","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"  ········································\n"},{"name":"stderr","text":"\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"wandb version 0.17.2 is available!  To upgrade, please run:\n $ pip install wandb --upgrade"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Tracking run with wandb version 0.16.4"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Run data is saved locally in <code>/kaggle/working/wandb/run-20240619_102707-bzo3elc5</code>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Syncing run <strong><a href='https://wandb.ai/cuboulder08/huggingface/runs/bzo3elc5' target=\"_blank\">flan-t5-finetuned-ner</a></strong> to <a href='https://wandb.ai/cuboulder08/huggingface' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":" View project at <a href='https://wandb.ai/cuboulder08/huggingface' target=\"_blank\">https://wandb.ai/cuboulder08/huggingface</a>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":" View run at <a href='https://wandb.ai/cuboulder08/huggingface/runs/bzo3elc5' target=\"_blank\">https://wandb.ai/cuboulder08/huggingface/runs/bzo3elc5</a>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='3793' max='9480' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [3793/9480 18:44 < 28:06, 3.37 it/s, Epoch 6/15]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Epoch</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n      <th>Precision</th>\n      <th>Recall</th>\n      <th>F1</th>\n      <th>Accuracy</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>0.381600</td>\n      <td>0.298674</td>\n      <td>0.530032</td>\n      <td>0.307874</td>\n      <td>0.389502</td>\n      <td>0.893164</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>0.245300</td>\n      <td>0.274724</td>\n      <td>0.562743</td>\n      <td>0.410184</td>\n      <td>0.474502</td>\n      <td>0.899448</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>0.282300</td>\n      <td>0.274372</td>\n      <td>0.520642</td>\n      <td>0.535125</td>\n      <td>0.527784</td>\n      <td>0.895419</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>0.254600</td>\n      <td>0.264106</td>\n      <td>0.571429</td>\n      <td>0.458274</td>\n      <td>0.508634</td>\n      <td>0.901031</td>\n    </tr>\n    <tr>\n      <td>5</td>\n      <td>0.249100</td>\n      <td>0.268268</td>\n      <td>0.565387</td>\n      <td>0.479019</td>\n      <td>0.518632</td>\n      <td>0.900696</td>\n    </tr>\n    <tr>\n      <td>6</td>\n      <td>0.252100</td>\n      <td>0.282854</td>\n      <td>0.572900</td>\n      <td>0.498350</td>\n      <td>0.533031</td>\n      <td>0.900935</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           B       0.64      0.35      0.45      2104\n           I       0.62      0.24      0.34       561\n           O       0.91      0.98      0.94     18180\n\n    accuracy                           0.89     20845\n   macro avg       0.72      0.52      0.58     20845\nweighted avg       0.88      0.89      0.88     20845\n\n              precision    recall  f1-score   support\n\n           B       0.64      0.46      0.53      2104\n           I       0.69      0.25      0.36       561\n           O       0.92      0.97      0.95     18180\n\n    accuracy                           0.90     20845\n   macro avg       0.75      0.56      0.61     20845\nweighted avg       0.89      0.90      0.89     20845\n\n              precision    recall  f1-score   support\n\n           B       0.58      0.58      0.58      2104\n           I       0.58      0.38      0.46       561\n           O       0.94      0.95      0.94     18180\n\n    accuracy                           0.90     20845\n   macro avg       0.70      0.64      0.66     20845\nweighted avg       0.89      0.90      0.89     20845\n\n              precision    recall  f1-score   support\n\n           B       0.64      0.50      0.56      2104\n           I       0.64      0.34      0.45       561\n           O       0.93      0.96      0.95     18180\n\n    accuracy                           0.90     20845\n   macro avg       0.74      0.60      0.65     20845\nweighted avg       0.89      0.90      0.89     20845\n\n              precision    recall  f1-score   support\n\n           B       0.62      0.52      0.56      2104\n           I       0.62      0.38      0.47       561\n           O       0.93      0.96      0.95     18180\n\n    accuracy                           0.90     20845\n   macro avg       0.73      0.62      0.66     20845\nweighted avg       0.89      0.90      0.89     20845\n\n              precision    recall  f1-score   support\n\n           B       0.62      0.53      0.57      2104\n           I       0.64      0.37      0.46       561\n           O       0.93      0.96      0.95     18180\n\n    accuracy                           0.90     20845\n   macro avg       0.73      0.62      0.66     20845\nweighted avg       0.89      0.90      0.90     20845\n\n","output_type":"stream"},{"name":"stderr","text":"--- Logging error ---\nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1104, in emit\n    self.flush()\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1084, in flush\n    self.stream.flush()\nOSError: [Errno 28] No space left on device\nCall stack:\n  File \"/opt/conda/lib/python3.10/threading.py\", line 973, in _bootstrap\n    self._bootstrap_inner()\n  File \"/opt/conda/lib/python3.10/threading.py\", line 1016, in _bootstrap_inner\n    self.run()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/vendor/watchdog_0_9_0/wandb_watchdog/observers/api.py\", line 199, in run\n    self.dispatch_events(self.event_queue, self.timeout)\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/vendor/watchdog_0_9_0/wandb_watchdog/observers/api.py\", line 368, in dispatch_events\n    handler.dispatch(event)\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/vendor/watchdog_0_9_0/wandb_watchdog/events.py\", line 454, in dispatch\n    _method_map[event_type](event)\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/filesync/dir_watcher.py\", line 288, in _on_file_modified\n    logger.info(f\"file/dir modified: { event.src_path}\")\nMessage: 'file/dir modified: /kaggle/working/wandb/run-20240619_102707-bzo3elc5/files/output.log'\nArguments: ()\n--- Logging error ---\nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1104, in emit\n    self.flush()\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1084, in flush\n    self.stream.flush()\nOSError: [Errno 28] No space left on device\nCall stack:\n  File \"/opt/conda/lib/python3.10/threading.py\", line 973, in _bootstrap\n    self._bootstrap_inner()\n  File \"/opt/conda/lib/python3.10/threading.py\", line 1016, in _bootstrap_inner\n    self.run()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal_util.py\", line 49, in run\n    self._run()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal_util.py\", line 100, in _run\n    self._process(record)\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal.py\", line 279, in _process\n    self._hm.handle(record)\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/handler.py\", line 138, in handle\n    handler(record)\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/handler.py\", line 146, in handle_request\n    logger.debug(f\"handle_request: {request_type}\")\nMessage: 'handle_request: keepalive'\nArguments: ()\n--- Logging error ---\nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1104, in emit\n    self.flush()\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1084, in flush\n    self.stream.flush()\nOSError: [Errno 28] No space left on device\nCall stack:\n  File \"/opt/conda/lib/python3.10/threading.py\", line 973, in _bootstrap\n    self._bootstrap_inner()\n  File \"/opt/conda/lib/python3.10/threading.py\", line 1016, in _bootstrap_inner\n    self.run()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal_util.py\", line 49, in run\n    self._run()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal_util.py\", line 100, in _run\n    self._process(record)\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal.py\", line 279, in _process\n    self._hm.handle(record)\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/handler.py\", line 138, in handle\n    handler(record)\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/handler.py\", line 146, in handle_request\n    logger.debug(f\"handle_request: {request_type}\")\nMessage: 'handle_request: status_report'\nArguments: ()\n--- Logging error ---\nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1104, in emit\n    self.flush()\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1084, in flush\n    self.stream.flush()\nOSError: [Errno 28] No space left on device\nCall stack:\n  File \"/opt/conda/lib/python3.10/threading.py\", line 973, in _bootstrap\n    self._bootstrap_inner()\n  File \"/opt/conda/lib/python3.10/threading.py\", line 1016, in _bootstrap_inner\n    self.run()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal_util.py\", line 49, in run\n    self._run()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal_util.py\", line 101, in _run\n    self._finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal.py\", line 282, in _finish\n    self._hm.finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/handler.py\", line 869, in finish\n    logger.info(\"shutting down handler\")\nMessage: 'shutting down handler'\nArguments: ()\n--- Logging error ---\nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1104, in emit\n    self.flush()\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1084, in flush\n    self.stream.flush()\nOSError: [Errno 28] No space left on device\nCall stack:\n  File \"/opt/conda/lib/python3.10/threading.py\", line 973, in _bootstrap\n    self._bootstrap_inner()\n  File \"/opt/conda/lib/python3.10/threading.py\", line 1016, in _bootstrap_inner\n    self.run()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal_util.py\", line 49, in run\n    self._run()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal_util.py\", line 101, in _run\n    self._finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal.py\", line 282, in _finish\n    self._hm.finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/handler.py\", line 871, in finish\n    self._system_monitor.finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/system/system_monitor.py\", line 203, in finish\n    logger.info(\"Stopping system monitor\")\nMessage: 'Stopping system monitor'\nArguments: ()\n--- Logging error ---\nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1104, in emit\n    self.flush()\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1084, in flush\n    self.stream.flush()\nOSError: [Errno 28] No space left on device\nCall stack:\n  File \"/opt/conda/lib/python3.10/threading.py\", line 973, in _bootstrap\n    self._bootstrap_inner()\n  File \"/opt/conda/lib/python3.10/threading.py\", line 1016, in _bootstrap_inner\n    self.run()\n  File \"/opt/conda/lib/python3.10/threading.py\", line 953, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/system/system_monitor.py\", line 179, in _start\n    logger.debug(\"Finished system metrics aggregation loop\")\nMessage: 'Finished system metrics aggregation loop'\nArguments: ()\n--- Logging error ---\nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1104, in emit\n    self.flush()\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1084, in flush\n    self.stream.flush()\nOSError: [Errno 28] No space left on device\nCall stack:\n  File \"/opt/conda/lib/python3.10/threading.py\", line 973, in _bootstrap\n    self._bootstrap_inner()\n  File \"/opt/conda/lib/python3.10/threading.py\", line 1016, in _bootstrap_inner\n    self.run()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal_util.py\", line 49, in run\n    self._run()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal_util.py\", line 101, in _run\n    self._finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal.py\", line 282, in _finish\n    self._hm.finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/handler.py\", line 871, in finish\n    self._system_monitor.finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/system/system_monitor.py\", line 206, in finish\n    asset.finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/cpu.py\", line 163, in finish\n    self.metrics_monitor.finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/interfaces.py\", line 202, in finish\n    logger.info(f\"Joined {thread_name} monitor\")\nMessage: 'Joined cpu monitor'\nArguments: ()\n--- Logging error ---\nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1104, in emit\n    self.flush()\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1084, in flush\n    self.stream.flush()\nOSError: [Errno 28] No space left on device\nCall stack:\n  File \"/opt/conda/lib/python3.10/threading.py\", line 973, in _bootstrap\n    self._bootstrap_inner()\n  File \"/opt/conda/lib/python3.10/threading.py\", line 1016, in _bootstrap_inner\n    self.run()\n  File \"/opt/conda/lib/python3.10/threading.py\", line 953, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/system/system_monitor.py\", line 183, in _start\n    logger.debug(\"Publishing last batch of metrics\")\nMessage: 'Publishing last batch of metrics'\nArguments: ()\n--- Logging error ---\nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1104, in emit\n    self.flush()\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1084, in flush\n    self.stream.flush()\nOSError: [Errno 28] No space left on device\nCall stack:\n  File \"/opt/conda/lib/python3.10/threading.py\", line 973, in _bootstrap\n    self._bootstrap_inner()\n  File \"/opt/conda/lib/python3.10/threading.py\", line 1016, in _bootstrap_inner\n    self.run()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal_util.py\", line 49, in run\n    self._run()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal_util.py\", line 101, in _run\n    self._finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal.py\", line 282, in _finish\n    self._hm.finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/handler.py\", line 871, in finish\n    self._system_monitor.finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/system/system_monitor.py\", line 206, in finish\n    asset.finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/disk.py\", line 210, in finish\n    self.metrics_monitor.finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/interfaces.py\", line 202, in finish\n    logger.info(f\"Joined {thread_name} monitor\")\nMessage: 'Joined disk monitor'\nArguments: ()\n--- Logging error ---\nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1104, in emit\n    self.flush()\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1084, in flush\n    self.stream.flush()\nOSError: [Errno 28] No space left on device\nCall stack:\n  File \"/opt/conda/lib/python3.10/threading.py\", line 973, in _bootstrap\n    self._bootstrap_inner()\n  File \"/opt/conda/lib/python3.10/threading.py\", line 1016, in _bootstrap_inner\n    self.run()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal_util.py\", line 49, in run\n    self._run()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal_util.py\", line 101, in _run\n    self._finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal.py\", line 282, in _finish\n    self._hm.finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/handler.py\", line 871, in finish\n    self._system_monitor.finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/system/system_monitor.py\", line 206, in finish\n    asset.finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/gpu.py\", line 388, in finish\n    self.metrics_monitor.finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/interfaces.py\", line 202, in finish\n    logger.info(f\"Joined {thread_name} monitor\")\nMessage: 'Joined gpu monitor'\nArguments: ()\n--- Logging error ---\nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1104, in emit\n    self.flush()\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1084, in flush\n    self.stream.flush()\nOSError: [Errno 28] No space left on device\nCall stack:\n  File \"/opt/conda/lib/python3.10/threading.py\", line 973, in _bootstrap\n    self._bootstrap_inner()\n  File \"/opt/conda/lib/python3.10/threading.py\", line 1016, in _bootstrap_inner\n    self.run()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal_util.py\", line 49, in run\n    self._run()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal_util.py\", line 101, in _run\n    self._finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal.py\", line 282, in _finish\n    self._hm.finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/handler.py\", line 871, in finish\n    self._system_monitor.finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/system/system_monitor.py\", line 206, in finish\n    asset.finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/memory.py\", line 152, in finish\n    self.metrics_monitor.finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/interfaces.py\", line 202, in finish\n    logger.info(f\"Joined {thread_name} monitor\")\nMessage: 'Joined memory monitor'\nArguments: ()\n--- Logging error ---\nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1104, in emit\n    self.flush()\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1084, in flush\n    self.stream.flush()\nOSError: [Errno 28] No space left on device\nCall stack:\n  File \"/opt/conda/lib/python3.10/threading.py\", line 973, in _bootstrap\n    self._bootstrap_inner()\n  File \"/opt/conda/lib/python3.10/threading.py\", line 1016, in _bootstrap_inner\n    self.run()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal_util.py\", line 49, in run\n    self._run()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal_util.py\", line 101, in _run\n    self._finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal.py\", line 282, in _finish\n    self._hm.finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/handler.py\", line 871, in finish\n    self._system_monitor.finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/system/system_monitor.py\", line 206, in finish\n    asset.finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/network.py\", line 96, in finish\n    self.metrics_monitor.finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/system/assets/interfaces.py\", line 202, in finish\n    logger.info(f\"Joined {thread_name} monitor\")\nMessage: 'Joined network monitor'\nArguments: ()\nException in thread OutRawRd-stderr:\nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/threading.py\", line 1016, in _bootstrap_inner\n    self.run()\n  File \"/opt/conda/lib/python3.10/threading.py\", line 953, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/sender.py\", line 1206, in _output_raw_reader_thread\n    self._output_raw_flush(stream)\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/sender.py\", line 1221, in _output_raw_flush\n    self._output_raw_file.write(data.encode(\"utf-8\"))\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/filesystem.py\", line 128, in write\n    super().write(b\"\\n\".join(ret) + b\"\\n\")\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/filesystem.py\", line 95, in write\n    self.f.flush()\nOSError: [Errno 28] No space left on device\n--- Logging error ---\nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1104, in emit\n    self.flush()\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1084, in flush\n    self.stream.flush()\nOSError: [Errno 28] No space left on device\nCall stack:\n  File \"/opt/conda/lib/python3.10/threading.py\", line 973, in _bootstrap\n    self._bootstrap_inner()\n  File \"/opt/conda/lib/python3.10/threading.py\", line 1016, in _bootstrap_inner\n    self.run()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal_util.py\", line 49, in run\n    self._run()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal_util.py\", line 101, in _run\n    self._finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal.py\", line 331, in _finish\n    self._sm.finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/sender.py\", line 1521, in finish\n    logger.info(\"shutting down sender\")\nMessage: 'shutting down sender'\nArguments: ()\n--- Logging error ---\nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1104, in emit\n    self.flush()\n  File \"/opt/conda/lib/python3.10/logging/__init__.py\", line 1084, in flush\n    self.stream.flush()\nOSError: [Errno 28] No space left on device\nCall stack:\n  File \"/opt/conda/lib/python3.10/threading.py\", line 973, in _bootstrap\n    self._bootstrap_inner()\n  File \"/opt/conda/lib/python3.10/threading.py\", line 1016, in _bootstrap_inner\n    self.run()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/service/streams.py\", line 48, in run\n    self._target(**self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal.py\", line 174, in wandb_internal\n    logger.error(f\"Thread {thread.name}:\", exc_info=exc_info)\nMessage: 'Thread SenderThread:'\nArguments: ()\nThread SenderThread:\nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal_util.py\", line 49, in run\n    self._run()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal_util.py\", line 101, in _run\n    self._finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/internal.py\", line 331, in _finish\n    self._sm.finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/sender.py\", line 1524, in finish\n    self._output_raw_finish()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/internal/sender.py\", line 1177, in _output_raw_finish\n    self._output_raw_file.close()\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/filesystem.py\", line 132, in close\n    super().write(self._buff)\n  File \"/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/filesystem.py\", line 95, in write\n    self.f.flush()\nOSError: [Errno 28] No space left on device\nwandb: ERROR Internal wandb error: file data was not synced\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mSafetensorError\u001b[0m                           Traceback (most recent call last)","Cell \u001b[0;32mIn[32], line 24\u001b[0m\n\u001b[1;32m     12\u001b[0m trainer \u001b[38;5;241m=\u001b[39m Trainer(\n\u001b[1;32m     13\u001b[0m     model\u001b[38;5;241m=\u001b[39mmodel,\n\u001b[1;32m     14\u001b[0m     args\u001b[38;5;241m=\u001b[39margs,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     20\u001b[0m     callbacks\u001b[38;5;241m=\u001b[39m[EarlyStoppingCallback(early_stopping_patience\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m3\u001b[39m)]  \u001b[38;5;66;03m# Early stopping callback\u001b[39;00m\n\u001b[1;32m     21\u001b[0m )\n\u001b[1;32m     23\u001b[0m \u001b[38;5;66;03m# Train the model\u001b[39;00m\n\u001b[0;32m---> 24\u001b[0m \u001b[43mtrainer\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtrain\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/transformers/trainer.py:1885\u001b[0m, in \u001b[0;36mTrainer.train\u001b[0;34m(self, resume_from_checkpoint, trial, ignore_keys_for_eval, **kwargs)\u001b[0m\n\u001b[1;32m   1883\u001b[0m         hf_hub_utils\u001b[38;5;241m.\u001b[39menable_progress_bars()\n\u001b[1;32m   1884\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1885\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43minner_training_loop\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1886\u001b[0m \u001b[43m        \u001b[49m\u001b[43margs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1887\u001b[0m \u001b[43m        \u001b[49m\u001b[43mresume_from_checkpoint\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mresume_from_checkpoint\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1888\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtrial\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtrial\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1889\u001b[0m \u001b[43m        \u001b[49m\u001b[43mignore_keys_for_eval\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mignore_keys_for_eval\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1890\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/transformers/trainer.py:2311\u001b[0m, in \u001b[0;36mTrainer._inner_training_loop\u001b[0;34m(self, batch_size, args, resume_from_checkpoint, trial, ignore_keys_for_eval)\u001b[0m\n\u001b[1;32m   2308\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcontrol\u001b[38;5;241m.\u001b[39mshould_training_stop \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[1;32m   2310\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcontrol \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcallback_handler\u001b[38;5;241m.\u001b[39mon_epoch_end(args, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstate, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcontrol)\n\u001b[0;32m-> 2311\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_maybe_log_save_evaluate\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtr_loss\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgrad_norm\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmodel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtrial\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mepoch\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mignore_keys_for_eval\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   2313\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m DebugOption\u001b[38;5;241m.\u001b[39mTPU_METRICS_DEBUG \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39margs\u001b[38;5;241m.\u001b[39mdebug:\n\u001b[1;32m   2314\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m is_torch_xla_available():\n\u001b[1;32m   2315\u001b[0m         \u001b[38;5;66;03m# tpu-comment: Logging debug metrics for PyTorch/XLA (compile, execute times, ops, etc.)\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/transformers/trainer.py:2732\u001b[0m, in \u001b[0;36mTrainer._maybe_log_save_evaluate\u001b[0;34m(self, tr_loss, grad_norm, model, trial, epoch, ignore_keys_for_eval)\u001b[0m\n\u001b[1;32m   2729\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlr_scheduler\u001b[38;5;241m.\u001b[39mstep(metrics[metric_to_check])\n\u001b[1;32m   2731\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcontrol\u001b[38;5;241m.\u001b[39mshould_save:\n\u001b[0;32m-> 2732\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_save_checkpoint\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmodel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtrial\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmetrics\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmetrics\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   2733\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcontrol \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcallback_handler\u001b[38;5;241m.\u001b[39mon_save(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39margs, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstate, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcontrol)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/transformers/trainer.py:2811\u001b[0m, in \u001b[0;36mTrainer._save_checkpoint\u001b[0;34m(self, model, trial, metrics)\u001b[0m\n\u001b[1;32m   2809\u001b[0m run_dir \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_output_dir(trial\u001b[38;5;241m=\u001b[39mtrial)\n\u001b[1;32m   2810\u001b[0m output_dir \u001b[38;5;241m=\u001b[39m os\u001b[38;5;241m.\u001b[39mpath\u001b[38;5;241m.\u001b[39mjoin(run_dir, checkpoint_folder)\n\u001b[0;32m-> 2811\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msave_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43moutput_dir\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m_internal_call\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m   2813\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39margs\u001b[38;5;241m.\u001b[39msave_only_model:\n\u001b[1;32m   2814\u001b[0m     \u001b[38;5;66;03m# Save optimizer and scheduler\u001b[39;00m\n\u001b[1;32m   2815\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_save_optimizer_and_scheduler(output_dir)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/transformers/trainer.py:3355\u001b[0m, in \u001b[0;36mTrainer.save_model\u001b[0;34m(self, output_dir, _internal_call)\u001b[0m\n\u001b[1;32m   3352\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmodel_wrapped\u001b[38;5;241m.\u001b[39msave_checkpoint(output_dir)\n\u001b[1;32m   3354\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39margs\u001b[38;5;241m.\u001b[39mshould_save:\n\u001b[0;32m-> 3355\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_save\u001b[49m\u001b[43m(\u001b[49m\u001b[43moutput_dir\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3357\u001b[0m \u001b[38;5;66;03m# Push to the Hub when `save_model` is called by the user.\u001b[39;00m\n\u001b[1;32m   3358\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39margs\u001b[38;5;241m.\u001b[39mpush_to_hub \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m _internal_call:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/transformers/trainer.py:3432\u001b[0m, in \u001b[0;36mTrainer._save\u001b[0;34m(self, output_dir, state_dict)\u001b[0m\n\u001b[1;32m   3430\u001b[0m             torch\u001b[38;5;241m.\u001b[39msave(state_dict, os\u001b[38;5;241m.\u001b[39mpath\u001b[38;5;241m.\u001b[39mjoin(output_dir, WEIGHTS_NAME))\n\u001b[1;32m   3431\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 3432\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msave_pretrained\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   3433\u001b[0m \u001b[43m        \u001b[49m\u001b[43moutput_dir\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstate_dict\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstate_dict\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msafe_serialization\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43margs\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msave_safetensors\u001b[49m\n\u001b[1;32m   3434\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3436\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtokenizer \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   3437\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtokenizer\u001b[38;5;241m.\u001b[39msave_pretrained(output_dir)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/transformers/modeling_utils.py:2612\u001b[0m, in \u001b[0;36mPreTrainedModel.save_pretrained\u001b[0;34m(self, save_directory, is_main_process, state_dict, save_function, push_to_hub, max_shard_size, safe_serialization, variant, token, save_peft_format, **kwargs)\u001b[0m\n\u001b[1;32m   2608\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m shard_file, shard \u001b[38;5;129;01min\u001b[39;00m shards\u001b[38;5;241m.\u001b[39mitems():\n\u001b[1;32m   2609\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m safe_serialization:\n\u001b[1;32m   2610\u001b[0m         \u001b[38;5;66;03m# At some point we will need to deal better with save_function (used for TPU and other distributed\u001b[39;00m\n\u001b[1;32m   2611\u001b[0m         \u001b[38;5;66;03m# joyfulness), but for now this enough.\u001b[39;00m\n\u001b[0;32m-> 2612\u001b[0m         \u001b[43msafe_save_file\u001b[49m\u001b[43m(\u001b[49m\u001b[43mshard\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mos\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpath\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mjoin\u001b[49m\u001b[43m(\u001b[49m\u001b[43msave_directory\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mshard_file\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmetadata\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m{\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mformat\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mpt\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m}\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   2613\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   2614\u001b[0m         save_function(shard, os\u001b[38;5;241m.\u001b[39mpath\u001b[38;5;241m.\u001b[39mjoin(save_directory, shard_file))\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/safetensors/torch.py:281\u001b[0m, in \u001b[0;36msave_file\u001b[0;34m(tensors, filename, metadata)\u001b[0m\n\u001b[1;32m    250\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21msave_file\u001b[39m(\n\u001b[1;32m    251\u001b[0m     tensors: Dict[\u001b[38;5;28mstr\u001b[39m, torch\u001b[38;5;241m.\u001b[39mTensor],\n\u001b[1;32m    252\u001b[0m     filename: Union[\u001b[38;5;28mstr\u001b[39m, os\u001b[38;5;241m.\u001b[39mPathLike],\n\u001b[1;32m    253\u001b[0m     metadata: Optional[Dict[\u001b[38;5;28mstr\u001b[39m, \u001b[38;5;28mstr\u001b[39m]] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m    254\u001b[0m ):\n\u001b[1;32m    255\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    256\u001b[0m \u001b[38;5;124;03m    Saves a dictionary of tensors into raw bytes in safetensors format.\u001b[39;00m\n\u001b[1;32m    257\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    279\u001b[0m \u001b[38;5;124;03m    ```\u001b[39;00m\n\u001b[1;32m    280\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 281\u001b[0m     \u001b[43mserialize_file\u001b[49m\u001b[43m(\u001b[49m\u001b[43m_flatten\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtensors\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfilename\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmetadata\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmetadata\u001b[49m\u001b[43m)\u001b[49m\n","\u001b[0;31mSafetensorError\u001b[0m: Error while serializing: IoError(Os { code: 28, kind: StorageFull, message: \"No space left on device\" })"],"ename":"SafetensorError","evalue":"Error while serializing: IoError(Os { code: 28, kind: StorageFull, message: \"No space left on device\" })","output_type":"error"},{"name":"stdout","text":"Error in callback <bound method _WandbInit._pause_backend of <wandb.sdk.wandb_init._WandbInit object at 0x7e3ab8ca3460>> (for post_run_cell), with arguments args (<ExecutionResult object at 7e3ac0cb4550, execution_count=32 error_before_exec=None error_in_exec=Error while serializing: IoError(Os { code: 28, kind: StorageFull, message: \"No space left on device\" }) info=<ExecutionInfo object at 7e3ac0cb6440, raw_cell=\"# from transformers import Trainer\n# trainer = Tra..\" store_history=True silent=False shell_futures=True cell_id=084da7a0-afcb-4000-86f9-304476c2f8ac> result=None>,),kwargs {}:\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mBrokenPipeError\u001b[0m                           Traceback (most recent call last)","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/wandb_init.py:438\u001b[0m, in \u001b[0;36m_WandbInit._pause_backend\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    436\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbackend\u001b[38;5;241m.\u001b[39minterface \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    437\u001b[0m     logger\u001b[38;5;241m.\u001b[39minfo(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpausing backend\u001b[39m\u001b[38;5;124m\"\u001b[39m)  \u001b[38;5;66;03m# type: ignore\u001b[39;00m\n\u001b[0;32m--> 438\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbackend\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minterface\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpublish_pause\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface.py:659\u001b[0m, in \u001b[0;36mInterfaceBase.publish_pause\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    657\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mpublish_pause\u001b[39m(\u001b[38;5;28mself\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    658\u001b[0m     pause \u001b[38;5;241m=\u001b[39m pb\u001b[38;5;241m.\u001b[39mPauseRequest()\n\u001b[0;32m--> 659\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_publish_pause\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpause\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface_shared.py:355\u001b[0m, in \u001b[0;36mInterfaceShared._publish_pause\u001b[0;34m(self, pause)\u001b[0m\n\u001b[1;32m    353\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_publish_pause\u001b[39m(\u001b[38;5;28mself\u001b[39m, pause: pb\u001b[38;5;241m.\u001b[39mPauseRequest) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    354\u001b[0m     rec \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_make_request(pause\u001b[38;5;241m=\u001b[39mpause)\n\u001b[0;32m--> 355\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_publish\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrec\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface_sock.py:51\u001b[0m, in \u001b[0;36mInterfaceSock._publish\u001b[0;34m(self, record, local)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_publish\u001b[39m(\u001b[38;5;28mself\u001b[39m, record: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpb.Record\u001b[39m\u001b[38;5;124m\"\u001b[39m, local: Optional[\u001b[38;5;28mbool\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m     50\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_assign(record)\n\u001b[0;32m---> 51\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sock_client\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend_record_publish\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrecord\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:221\u001b[0m, in \u001b[0;36mSockClient.send_record_publish\u001b[0;34m(self, record)\u001b[0m\n\u001b[1;32m    219\u001b[0m server_req \u001b[38;5;241m=\u001b[39m spb\u001b[38;5;241m.\u001b[39mServerRequest()\n\u001b[1;32m    220\u001b[0m server_req\u001b[38;5;241m.\u001b[39mrecord_publish\u001b[38;5;241m.\u001b[39mCopyFrom(record)\n\u001b[0;32m--> 221\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend_server_request\u001b[49m\u001b[43m(\u001b[49m\u001b[43mserver_req\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:155\u001b[0m, in \u001b[0;36mSockClient.send_server_request\u001b[0;34m(self, msg)\u001b[0m\n\u001b[1;32m    154\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21msend_server_request\u001b[39m(\u001b[38;5;28mself\u001b[39m, msg: Any) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 155\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_send_message\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmsg\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:152\u001b[0m, in \u001b[0;36mSockClient._send_message\u001b[0;34m(self, msg)\u001b[0m\n\u001b[1;32m    150\u001b[0m header \u001b[38;5;241m=\u001b[39m struct\u001b[38;5;241m.\u001b[39mpack(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m<BI\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mord\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mW\u001b[39m\u001b[38;5;124m\"\u001b[39m), raw_size)\n\u001b[1;32m    151\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock:\n\u001b[0;32m--> 152\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sendall_with_error_handle\u001b[49m\u001b[43m(\u001b[49m\u001b[43mheader\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:130\u001b[0m, in \u001b[0;36mSockClient._sendall_with_error_handle\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m    128\u001b[0m start_time \u001b[38;5;241m=\u001b[39m time\u001b[38;5;241m.\u001b[39mmonotonic()\n\u001b[1;32m    129\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 130\u001b[0m     sent \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sock\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    131\u001b[0m     \u001b[38;5;66;03m# sent equal to 0 indicates a closed socket\u001b[39;00m\n\u001b[1;32m    132\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m sent \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m:\n","\u001b[0;31mBrokenPipeError\u001b[0m: [Errno 32] Broken pipe"],"ename":"BrokenPipeError","evalue":"[Errno 32] Broken pipe","output_type":"error"}]},{"cell_type":"code","source":"from sklearn.metrics import classification_report, accuracy_score\ny_true_flat = [label for sublist in y_true for label in sublist]\ny_pred_flat = [label for sublist in y_pred for label in sublist]\n\naccuracy = accuracy_score(y_true_flat, y_pred_flat)\n\nreport = classification_report(y_true_flat, y_pred_flat)\n\nprint(\"Accuracy:\", accuracy)\nprint(\"Classification Report:\")\nprint(report)\n","metadata":{"id":"Ke70QvQUMbdK","colab":{"base_uri":"https://localhost:8080/"},"outputId":"51683211-4d9b-448f-ef6c-656adbabb6b3","execution":{"iopub.status.busy":"2024-06-19T10:47:16.337097Z","iopub.execute_input":"2024-06-19T10:47:16.337517Z","iopub.status.idle":"2024-06-19T10:47:16.824383Z","shell.execute_reply.started":"2024-06-19T10:47:16.337482Z","shell.execute_reply":"2024-06-19T10:47:16.823387Z"},"trusted":true},"execution_count":33,"outputs":[{"name":"stdout","text":"Error in callback <bound method _WandbInit._resume_backend of <wandb.sdk.wandb_init._WandbInit object at 0x7e3ab8ca3460>> (for pre_run_cell), with arguments args (<ExecutionInfo object at 7e3a2029bb80, raw_cell=\"from sklearn.metrics import classification_report,..\" store_history=True silent=False shell_futures=True cell_id=91b04e2a-4ca9-430c-96d6-4dd9b3b03373>,),kwargs {}:\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mBrokenPipeError\u001b[0m                           Traceback (most recent call last)","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/wandb_init.py:443\u001b[0m, in \u001b[0;36m_WandbInit._resume_backend\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    441\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbackend \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbackend\u001b[38;5;241m.\u001b[39minterface \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    442\u001b[0m     logger\u001b[38;5;241m.\u001b[39minfo(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mresuming backend\u001b[39m\u001b[38;5;124m\"\u001b[39m)  \u001b[38;5;66;03m# type: ignore\u001b[39;00m\n\u001b[0;32m--> 443\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbackend\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minterface\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpublish_resume\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface.py:667\u001b[0m, in \u001b[0;36mInterfaceBase.publish_resume\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    665\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mpublish_resume\u001b[39m(\u001b[38;5;28mself\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    666\u001b[0m     resume \u001b[38;5;241m=\u001b[39m pb\u001b[38;5;241m.\u001b[39mResumeRequest()\n\u001b[0;32m--> 667\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_publish_resume\u001b[49m\u001b[43m(\u001b[49m\u001b[43mresume\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface_shared.py:359\u001b[0m, in \u001b[0;36mInterfaceShared._publish_resume\u001b[0;34m(self, resume)\u001b[0m\n\u001b[1;32m    357\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_publish_resume\u001b[39m(\u001b[38;5;28mself\u001b[39m, resume: pb\u001b[38;5;241m.\u001b[39mResumeRequest) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    358\u001b[0m     rec \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_make_request(resume\u001b[38;5;241m=\u001b[39mresume)\n\u001b[0;32m--> 359\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_publish\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrec\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface_sock.py:51\u001b[0m, in \u001b[0;36mInterfaceSock._publish\u001b[0;34m(self, record, local)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_publish\u001b[39m(\u001b[38;5;28mself\u001b[39m, record: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpb.Record\u001b[39m\u001b[38;5;124m\"\u001b[39m, local: Optional[\u001b[38;5;28mbool\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m     50\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_assign(record)\n\u001b[0;32m---> 51\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sock_client\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend_record_publish\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrecord\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:221\u001b[0m, in \u001b[0;36mSockClient.send_record_publish\u001b[0;34m(self, record)\u001b[0m\n\u001b[1;32m    219\u001b[0m server_req \u001b[38;5;241m=\u001b[39m spb\u001b[38;5;241m.\u001b[39mServerRequest()\n\u001b[1;32m    220\u001b[0m server_req\u001b[38;5;241m.\u001b[39mrecord_publish\u001b[38;5;241m.\u001b[39mCopyFrom(record)\n\u001b[0;32m--> 221\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend_server_request\u001b[49m\u001b[43m(\u001b[49m\u001b[43mserver_req\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:155\u001b[0m, in \u001b[0;36mSockClient.send_server_request\u001b[0;34m(self, msg)\u001b[0m\n\u001b[1;32m    154\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21msend_server_request\u001b[39m(\u001b[38;5;28mself\u001b[39m, msg: Any) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 155\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_send_message\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmsg\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:152\u001b[0m, in \u001b[0;36mSockClient._send_message\u001b[0;34m(self, msg)\u001b[0m\n\u001b[1;32m    150\u001b[0m header \u001b[38;5;241m=\u001b[39m struct\u001b[38;5;241m.\u001b[39mpack(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m<BI\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mord\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mW\u001b[39m\u001b[38;5;124m\"\u001b[39m), raw_size)\n\u001b[1;32m    151\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock:\n\u001b[0;32m--> 152\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sendall_with_error_handle\u001b[49m\u001b[43m(\u001b[49m\u001b[43mheader\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:130\u001b[0m, in \u001b[0;36mSockClient._sendall_with_error_handle\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m    128\u001b[0m start_time \u001b[38;5;241m=\u001b[39m time\u001b[38;5;241m.\u001b[39mmonotonic()\n\u001b[1;32m    129\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 130\u001b[0m     sent \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sock\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    131\u001b[0m     \u001b[38;5;66;03m# sent equal to 0 indicates a closed socket\u001b[39;00m\n\u001b[1;32m    132\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m sent \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m:\n","\u001b[0;31mBrokenPipeError\u001b[0m: [Errno 32] Broken pipe"],"ename":"BrokenPipeError","evalue":"[Errno 32] Broken pipe","output_type":"error"},{"name":"stdout","text":"Accuracy: 0.9009354761333653\nClassification Report:\n              precision    recall  f1-score   support\n\n           B       0.62      0.53      0.57      2104\n           I       0.64      0.37      0.46       561\n           O       0.93      0.96      0.95     18180\n\n    accuracy                           0.90     20845\n   macro avg       0.73      0.62      0.66     20845\nweighted avg       0.89      0.90      0.90     20845\n\nError in callback <bound method _WandbInit._pause_backend of <wandb.sdk.wandb_init._WandbInit object at 0x7e3ab8ca3460>> (for post_run_cell), with arguments args (<ExecutionResult object at 7e3981a9e770, execution_count=33 error_before_exec=None error_in_exec=None info=<ExecutionInfo object at 7e3a2029bb80, raw_cell=\"from sklearn.metrics import classification_report,..\" store_history=True silent=False shell_futures=True cell_id=91b04e2a-4ca9-430c-96d6-4dd9b3b03373> result=None>,),kwargs {}:\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mBrokenPipeError\u001b[0m                           Traceback (most recent call last)","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/wandb_init.py:438\u001b[0m, in \u001b[0;36m_WandbInit._pause_backend\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    436\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbackend\u001b[38;5;241m.\u001b[39minterface \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    437\u001b[0m     logger\u001b[38;5;241m.\u001b[39minfo(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpausing backend\u001b[39m\u001b[38;5;124m\"\u001b[39m)  \u001b[38;5;66;03m# type: ignore\u001b[39;00m\n\u001b[0;32m--> 438\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbackend\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minterface\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpublish_pause\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface.py:659\u001b[0m, in \u001b[0;36mInterfaceBase.publish_pause\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    657\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mpublish_pause\u001b[39m(\u001b[38;5;28mself\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    658\u001b[0m     pause \u001b[38;5;241m=\u001b[39m pb\u001b[38;5;241m.\u001b[39mPauseRequest()\n\u001b[0;32m--> 659\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_publish_pause\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpause\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface_shared.py:355\u001b[0m, in \u001b[0;36mInterfaceShared._publish_pause\u001b[0;34m(self, pause)\u001b[0m\n\u001b[1;32m    353\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_publish_pause\u001b[39m(\u001b[38;5;28mself\u001b[39m, pause: pb\u001b[38;5;241m.\u001b[39mPauseRequest) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    354\u001b[0m     rec \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_make_request(pause\u001b[38;5;241m=\u001b[39mpause)\n\u001b[0;32m--> 355\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_publish\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrec\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface_sock.py:51\u001b[0m, in \u001b[0;36mInterfaceSock._publish\u001b[0;34m(self, record, local)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_publish\u001b[39m(\u001b[38;5;28mself\u001b[39m, record: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpb.Record\u001b[39m\u001b[38;5;124m\"\u001b[39m, local: Optional[\u001b[38;5;28mbool\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m     50\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_assign(record)\n\u001b[0;32m---> 51\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sock_client\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend_record_publish\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrecord\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:221\u001b[0m, in \u001b[0;36mSockClient.send_record_publish\u001b[0;34m(self, record)\u001b[0m\n\u001b[1;32m    219\u001b[0m server_req \u001b[38;5;241m=\u001b[39m spb\u001b[38;5;241m.\u001b[39mServerRequest()\n\u001b[1;32m    220\u001b[0m server_req\u001b[38;5;241m.\u001b[39mrecord_publish\u001b[38;5;241m.\u001b[39mCopyFrom(record)\n\u001b[0;32m--> 221\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend_server_request\u001b[49m\u001b[43m(\u001b[49m\u001b[43mserver_req\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:155\u001b[0m, in \u001b[0;36mSockClient.send_server_request\u001b[0;34m(self, msg)\u001b[0m\n\u001b[1;32m    154\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21msend_server_request\u001b[39m(\u001b[38;5;28mself\u001b[39m, msg: Any) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 155\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_send_message\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmsg\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:152\u001b[0m, in \u001b[0;36mSockClient._send_message\u001b[0;34m(self, msg)\u001b[0m\n\u001b[1;32m    150\u001b[0m header \u001b[38;5;241m=\u001b[39m struct\u001b[38;5;241m.\u001b[39mpack(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m<BI\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mord\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mW\u001b[39m\u001b[38;5;124m\"\u001b[39m), raw_size)\n\u001b[1;32m    151\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock:\n\u001b[0;32m--> 152\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sendall_with_error_handle\u001b[49m\u001b[43m(\u001b[49m\u001b[43mheader\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:130\u001b[0m, in \u001b[0;36mSockClient._sendall_with_error_handle\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m    128\u001b[0m start_time \u001b[38;5;241m=\u001b[39m time\u001b[38;5;241m.\u001b[39mmonotonic()\n\u001b[1;32m    129\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 130\u001b[0m     sent \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sock\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    131\u001b[0m     \u001b[38;5;66;03m# sent equal to 0 indicates a closed socket\u001b[39;00m\n\u001b[1;32m    132\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m sent \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m:\n","\u001b[0;31mBrokenPipeError\u001b[0m: [Errno 32] Broken pipe"],"ename":"BrokenPipeError","evalue":"[Errno 32] Broken pipe","output_type":"error"}]},{"cell_type":"code","source":"print(trainer.state.log_history)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zd2jBG86KDo6","outputId":"01a9bf8f-d036-493b-819c-b346770dc539","execution":{"iopub.status.busy":"2024-06-19T10:47:33.251758Z","iopub.execute_input":"2024-06-19T10:47:33.252202Z","iopub.status.idle":"2024-06-19T10:47:33.437812Z","shell.execute_reply.started":"2024-06-19T10:47:33.252167Z","shell.execute_reply":"2024-06-19T10:47:33.436806Z"},"trusted":true},"execution_count":34,"outputs":[{"name":"stdout","text":"Error in callback <bound method _WandbInit._resume_backend of <wandb.sdk.wandb_init._WandbInit object at 0x7e3ab8ca3460>> (for pre_run_cell), with arguments args (<ExecutionInfo object at 7e3981a9e500, raw_cell=\"print(trainer.state.log_history)\" store_history=True silent=False shell_futures=True cell_id=da073403-c549-45aa-b01d-973b12a39cb0>,),kwargs {}:\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mBrokenPipeError\u001b[0m                           Traceback (most recent call last)","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/wandb_init.py:443\u001b[0m, in \u001b[0;36m_WandbInit._resume_backend\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    441\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbackend \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbackend\u001b[38;5;241m.\u001b[39minterface \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    442\u001b[0m     logger\u001b[38;5;241m.\u001b[39minfo(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mresuming backend\u001b[39m\u001b[38;5;124m\"\u001b[39m)  \u001b[38;5;66;03m# type: ignore\u001b[39;00m\n\u001b[0;32m--> 443\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbackend\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minterface\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpublish_resume\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface.py:667\u001b[0m, in \u001b[0;36mInterfaceBase.publish_resume\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    665\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mpublish_resume\u001b[39m(\u001b[38;5;28mself\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    666\u001b[0m     resume \u001b[38;5;241m=\u001b[39m pb\u001b[38;5;241m.\u001b[39mResumeRequest()\n\u001b[0;32m--> 667\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_publish_resume\u001b[49m\u001b[43m(\u001b[49m\u001b[43mresume\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface_shared.py:359\u001b[0m, in \u001b[0;36mInterfaceShared._publish_resume\u001b[0;34m(self, resume)\u001b[0m\n\u001b[1;32m    357\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_publish_resume\u001b[39m(\u001b[38;5;28mself\u001b[39m, resume: pb\u001b[38;5;241m.\u001b[39mResumeRequest) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    358\u001b[0m     rec \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_make_request(resume\u001b[38;5;241m=\u001b[39mresume)\n\u001b[0;32m--> 359\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_publish\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrec\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface_sock.py:51\u001b[0m, in \u001b[0;36mInterfaceSock._publish\u001b[0;34m(self, record, local)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_publish\u001b[39m(\u001b[38;5;28mself\u001b[39m, record: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpb.Record\u001b[39m\u001b[38;5;124m\"\u001b[39m, local: Optional[\u001b[38;5;28mbool\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m     50\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_assign(record)\n\u001b[0;32m---> 51\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sock_client\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend_record_publish\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrecord\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:221\u001b[0m, in \u001b[0;36mSockClient.send_record_publish\u001b[0;34m(self, record)\u001b[0m\n\u001b[1;32m    219\u001b[0m server_req \u001b[38;5;241m=\u001b[39m spb\u001b[38;5;241m.\u001b[39mServerRequest()\n\u001b[1;32m    220\u001b[0m server_req\u001b[38;5;241m.\u001b[39mrecord_publish\u001b[38;5;241m.\u001b[39mCopyFrom(record)\n\u001b[0;32m--> 221\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend_server_request\u001b[49m\u001b[43m(\u001b[49m\u001b[43mserver_req\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:155\u001b[0m, in \u001b[0;36mSockClient.send_server_request\u001b[0;34m(self, msg)\u001b[0m\n\u001b[1;32m    154\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21msend_server_request\u001b[39m(\u001b[38;5;28mself\u001b[39m, msg: Any) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 155\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_send_message\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmsg\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:152\u001b[0m, in \u001b[0;36mSockClient._send_message\u001b[0;34m(self, msg)\u001b[0m\n\u001b[1;32m    150\u001b[0m header \u001b[38;5;241m=\u001b[39m struct\u001b[38;5;241m.\u001b[39mpack(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m<BI\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mord\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mW\u001b[39m\u001b[38;5;124m\"\u001b[39m), raw_size)\n\u001b[1;32m    151\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock:\n\u001b[0;32m--> 152\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sendall_with_error_handle\u001b[49m\u001b[43m(\u001b[49m\u001b[43mheader\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:130\u001b[0m, in \u001b[0;36mSockClient._sendall_with_error_handle\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m    128\u001b[0m start_time \u001b[38;5;241m=\u001b[39m time\u001b[38;5;241m.\u001b[39mmonotonic()\n\u001b[1;32m    129\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 130\u001b[0m     sent \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sock\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    131\u001b[0m     \u001b[38;5;66;03m# sent equal to 0 indicates a closed socket\u001b[39;00m\n\u001b[1;32m    132\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m sent \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m:\n","\u001b[0;31mBrokenPipeError\u001b[0m: [Errno 32] Broken pipe"],"ename":"BrokenPipeError","evalue":"[Errno 32] Broken pipe","output_type":"error"},{"name":"stdout","text":"[{'loss': 1.7806, 'grad_norm': 7.514279365539551, 'learning_rate': 2.697151898734177e-05, 'epoch': 0.015822784810126583, 'step': 10}, {'loss': 1.1109, 'grad_norm': 6.035611629486084, 'learning_rate': 2.6943037974683544e-05, 'epoch': 0.03164556962025317, 'step': 20}, {'loss': 0.9215, 'grad_norm': 4.515562057495117, 'learning_rate': 2.6914556962025315e-05, 'epoch': 0.04746835443037975, 'step': 30}, {'loss': 0.7867, 'grad_norm': 4.691675186157227, 'learning_rate': 2.688607594936709e-05, 'epoch': 0.06329113924050633, 'step': 40}, {'loss': 0.9267, 'grad_norm': 5.806793212890625, 'learning_rate': 2.685759493670886e-05, 'epoch': 0.07911392405063292, 'step': 50}, {'loss': 0.9014, 'grad_norm': 5.063213348388672, 'learning_rate': 2.682911392405063e-05, 'epoch': 0.0949367088607595, 'step': 60}, {'loss': 0.7103, 'grad_norm': 4.708641529083252, 'learning_rate': 2.6800632911392404e-05, 'epoch': 0.11075949367088607, 'step': 70}, {'loss': 0.7083, 'grad_norm': 5.085783958435059, 'learning_rate': 2.6772151898734175e-05, 'epoch': 0.12658227848101267, 'step': 80}, {'loss': 0.6051, 'grad_norm': 3.917137861251831, 'learning_rate': 2.6743670886075946e-05, 'epoch': 0.14240506329113925, 'step': 90}, {'loss': 0.6824, 'grad_norm': 4.945587635040283, 'learning_rate': 2.671518987341772e-05, 'epoch': 0.15822784810126583, 'step': 100}, {'loss': 0.6563, 'grad_norm': 3.6901443004608154, 'learning_rate': 2.668670886075949e-05, 'epoch': 0.17405063291139242, 'step': 110}, {'loss': 0.5689, 'grad_norm': 4.032862186431885, 'learning_rate': 2.6658227848101265e-05, 'epoch': 0.189873417721519, 'step': 120}, {'loss': 0.5365, 'grad_norm': 4.240428447723389, 'learning_rate': 2.6629746835443035e-05, 'epoch': 0.20569620253164558, 'step': 130}, {'loss': 0.4803, 'grad_norm': 4.297921180725098, 'learning_rate': 2.660126582278481e-05, 'epoch': 0.22151898734177214, 'step': 140}, {'loss': 0.5348, 'grad_norm': 4.4222612380981445, 'learning_rate': 2.6572784810126584e-05, 'epoch': 0.23734177215189872, 'step': 150}, {'loss': 0.5153, 'grad_norm': 3.577976703643799, 'learning_rate': 2.6544303797468354e-05, 'epoch': 0.25316455696202533, 'step': 160}, {'loss': 0.5457, 'grad_norm': 2.618502378463745, 'learning_rate': 2.651582278481013e-05, 'epoch': 0.2689873417721519, 'step': 170}, {'loss': 0.4405, 'grad_norm': 3.0514414310455322, 'learning_rate': 2.64873417721519e-05, 'epoch': 0.2848101265822785, 'step': 180}, {'loss': 0.5409, 'grad_norm': 3.4784438610076904, 'learning_rate': 2.645886075949367e-05, 'epoch': 0.30063291139240506, 'step': 190}, {'loss': 0.4706, 'grad_norm': 4.063563823699951, 'learning_rate': 2.6430379746835444e-05, 'epoch': 0.31645569620253167, 'step': 200}, {'loss': 0.4532, 'grad_norm': 2.811194896697998, 'learning_rate': 2.6401898734177215e-05, 'epoch': 0.3322784810126582, 'step': 210}, {'loss': 0.46, 'grad_norm': 2.3785293102264404, 'learning_rate': 2.6373417721518986e-05, 'epoch': 0.34810126582278483, 'step': 220}, {'loss': 0.4225, 'grad_norm': 2.8745222091674805, 'learning_rate': 2.634493670886076e-05, 'epoch': 0.3639240506329114, 'step': 230}, {'loss': 0.41, 'grad_norm': 4.308791160583496, 'learning_rate': 2.631645569620253e-05, 'epoch': 0.379746835443038, 'step': 240}, {'loss': 0.388, 'grad_norm': 1.7259478569030762, 'learning_rate': 2.6287974683544305e-05, 'epoch': 0.39556962025316456, 'step': 250}, {'loss': 0.4084, 'grad_norm': 2.424816846847534, 'learning_rate': 2.6259493670886075e-05, 'epoch': 0.41139240506329117, 'step': 260}, {'loss': 0.3775, 'grad_norm': 2.278701066970825, 'learning_rate': 2.6231012658227846e-05, 'epoch': 0.4272151898734177, 'step': 270}, {'loss': 0.4688, 'grad_norm': 2.6048319339752197, 'learning_rate': 2.620253164556962e-05, 'epoch': 0.4430379746835443, 'step': 280}, {'loss': 0.4497, 'grad_norm': 2.5134148597717285, 'learning_rate': 2.617405063291139e-05, 'epoch': 0.4588607594936709, 'step': 290}, {'loss': 0.3793, 'grad_norm': 1.533328890800476, 'learning_rate': 2.6145569620253165e-05, 'epoch': 0.47468354430379744, 'step': 300}, {'loss': 0.3623, 'grad_norm': 1.3758583068847656, 'learning_rate': 2.6117088607594936e-05, 'epoch': 0.49050632911392406, 'step': 310}, {'loss': 0.3922, 'grad_norm': 2.0485410690307617, 'learning_rate': 2.6088607594936706e-05, 'epoch': 0.5063291139240507, 'step': 320}, {'loss': 0.4022, 'grad_norm': 2.374473810195923, 'learning_rate': 2.606012658227848e-05, 'epoch': 0.5221518987341772, 'step': 330}, {'loss': 0.3924, 'grad_norm': 3.1738650798797607, 'learning_rate': 2.603164556962025e-05, 'epoch': 0.5379746835443038, 'step': 340}, {'loss': 0.3708, 'grad_norm': 1.2584466934204102, 'learning_rate': 2.6003164556962022e-05, 'epoch': 0.5537974683544303, 'step': 350}, {'loss': 0.4013, 'grad_norm': 2.3538389205932617, 'learning_rate': 2.5974683544303796e-05, 'epoch': 0.569620253164557, 'step': 360}, {'loss': 0.3764, 'grad_norm': 1.8143413066864014, 'learning_rate': 2.5946202531645567e-05, 'epoch': 0.5854430379746836, 'step': 370}, {'loss': 0.3044, 'grad_norm': 2.842970848083496, 'learning_rate': 2.591772151898734e-05, 'epoch': 0.6012658227848101, 'step': 380}, {'loss': 0.3273, 'grad_norm': 1.8642088174819946, 'learning_rate': 2.588924050632911e-05, 'epoch': 0.6170886075949367, 'step': 390}, {'loss': 0.3713, 'grad_norm': 1.9060910940170288, 'learning_rate': 2.5860759493670882e-05, 'epoch': 0.6329113924050633, 'step': 400}, {'loss': 0.3698, 'grad_norm': 1.1826343536376953, 'learning_rate': 2.5832278481012657e-05, 'epoch': 0.6487341772151899, 'step': 410}, {'loss': 0.3953, 'grad_norm': 1.0299791097640991, 'learning_rate': 2.580379746835443e-05, 'epoch': 0.6645569620253164, 'step': 420}, {'loss': 0.3229, 'grad_norm': 1.5589311122894287, 'learning_rate': 2.57753164556962e-05, 'epoch': 0.680379746835443, 'step': 430}, {'loss': 0.3413, 'grad_norm': 2.2665228843688965, 'learning_rate': 2.5746835443037976e-05, 'epoch': 0.6962025316455697, 'step': 440}, {'loss': 0.3499, 'grad_norm': 1.4517587423324585, 'learning_rate': 2.5718354430379746e-05, 'epoch': 0.7120253164556962, 'step': 450}, {'loss': 0.3611, 'grad_norm': 3.331573486328125, 'learning_rate': 2.568987341772152e-05, 'epoch': 0.7278481012658228, 'step': 460}, {'loss': 0.3513, 'grad_norm': 1.5166155099868774, 'learning_rate': 2.566139240506329e-05, 'epoch': 0.7436708860759493, 'step': 470}, {'loss': 0.3012, 'grad_norm': 1.4116348028182983, 'learning_rate': 2.5632911392405062e-05, 'epoch': 0.759493670886076, 'step': 480}, {'loss': 0.322, 'grad_norm': 1.1755059957504272, 'learning_rate': 2.5604430379746836e-05, 'epoch': 0.7753164556962026, 'step': 490}, {'loss': 0.3514, 'grad_norm': 1.5446816682815552, 'learning_rate': 2.5575949367088607e-05, 'epoch': 0.7911392405063291, 'step': 500}, {'loss': 0.3119, 'grad_norm': 3.1361067295074463, 'learning_rate': 2.554746835443038e-05, 'epoch': 0.8069620253164557, 'step': 510}, {'loss': 0.3749, 'grad_norm': 1.5478240251541138, 'learning_rate': 2.551898734177215e-05, 'epoch': 0.8227848101265823, 'step': 520}, {'loss': 0.3918, 'grad_norm': 1.6736844778060913, 'learning_rate': 2.5490506329113922e-05, 'epoch': 0.8386075949367089, 'step': 530}, {'loss': 0.3511, 'grad_norm': 1.1572068929672241, 'learning_rate': 2.5462025316455696e-05, 'epoch': 0.8544303797468354, 'step': 540}, {'loss': 0.2608, 'grad_norm': 1.105403184890747, 'learning_rate': 2.5433544303797467e-05, 'epoch': 0.870253164556962, 'step': 550}, {'loss': 0.3128, 'grad_norm': 1.2833374738693237, 'learning_rate': 2.540506329113924e-05, 'epoch': 0.8860759493670886, 'step': 560}, {'loss': 0.3406, 'grad_norm': 2.272648811340332, 'learning_rate': 2.5376582278481012e-05, 'epoch': 0.9018987341772152, 'step': 570}, {'loss': 0.3353, 'grad_norm': 0.8209331035614014, 'learning_rate': 2.5348101265822783e-05, 'epoch': 0.9177215189873418, 'step': 580}, {'loss': 0.3183, 'grad_norm': 1.4421027898788452, 'learning_rate': 2.5319620253164557e-05, 'epoch': 0.9335443037974683, 'step': 590}, {'loss': 0.4174, 'grad_norm': 1.5690380334854126, 'learning_rate': 2.5291139240506328e-05, 'epoch': 0.9493670886075949, 'step': 600}, {'loss': 0.3823, 'grad_norm': 2.4955873489379883, 'learning_rate': 2.5262658227848098e-05, 'epoch': 0.9651898734177216, 'step': 610}, {'loss': 0.3047, 'grad_norm': 1.0151242017745972, 'learning_rate': 2.5234177215189872e-05, 'epoch': 0.9810126582278481, 'step': 620}, {'loss': 0.3816, 'grad_norm': 1.6446126699447632, 'learning_rate': 2.5205696202531643e-05, 'epoch': 0.9968354430379747, 'step': 630}, {'eval_loss': 0.29867395758628845, 'eval_precision': 0.5300324675324676, 'eval_recall': 0.30787364450730786, 'eval_f1': 0.3895019385624814, 'eval_accuracy': 0.8931638282561766, 'eval_runtime': 7.8673, 'eval_samples_per_second': 160.792, 'eval_steps_per_second': 20.21, 'epoch': 1.0, 'step': 632}, {'loss': 0.3346, 'grad_norm': 1.4874464273452759, 'learning_rate': 2.5177215189873417e-05, 'epoch': 1.0126582278481013, 'step': 640}, {'loss': 0.3404, 'grad_norm': 1.225436806678772, 'learning_rate': 2.5148734177215188e-05, 'epoch': 1.0284810126582278, 'step': 650}, {'loss': 0.2899, 'grad_norm': 1.2477571964263916, 'learning_rate': 2.512025316455696e-05, 'epoch': 1.0443037974683544, 'step': 660}, {'loss': 0.3498, 'grad_norm': 0.9704194664955139, 'learning_rate': 2.5091772151898733e-05, 'epoch': 1.0601265822784811, 'step': 670}, {'loss': 0.4182, 'grad_norm': 1.4873121976852417, 'learning_rate': 2.5063291139240504e-05, 'epoch': 1.0759493670886076, 'step': 680}, {'loss': 0.2982, 'grad_norm': 1.1854050159454346, 'learning_rate': 2.5034810126582278e-05, 'epoch': 1.0917721518987342, 'step': 690}, {'loss': 0.3022, 'grad_norm': 1.2247989177703857, 'learning_rate': 2.500632911392405e-05, 'epoch': 1.1075949367088607, 'step': 700}, {'loss': 0.2725, 'grad_norm': 1.1817573308944702, 'learning_rate': 2.4977848101265823e-05, 'epoch': 1.1234177215189873, 'step': 710}, {'loss': 0.2803, 'grad_norm': 0.8331818580627441, 'learning_rate': 2.4949367088607597e-05, 'epoch': 1.139240506329114, 'step': 720}, {'loss': 0.2898, 'grad_norm': 1.5618993043899536, 'learning_rate': 2.4920886075949367e-05, 'epoch': 1.1550632911392404, 'step': 730}, {'loss': 0.2998, 'grad_norm': 1.6117802858352661, 'learning_rate': 2.4892405063291138e-05, 'epoch': 1.1708860759493671, 'step': 740}, {'loss': 0.2919, 'grad_norm': 1.1737838983535767, 'learning_rate': 2.4863924050632912e-05, 'epoch': 1.1867088607594938, 'step': 750}, {'loss': 0.3213, 'grad_norm': 0.981306791305542, 'learning_rate': 2.4835443037974683e-05, 'epoch': 1.2025316455696202, 'step': 760}, {'loss': 0.2911, 'grad_norm': 2.177563190460205, 'learning_rate': 2.4806962025316457e-05, 'epoch': 1.2183544303797469, 'step': 770}, {'loss': 0.3392, 'grad_norm': 1.407338261604309, 'learning_rate': 2.4778481012658228e-05, 'epoch': 1.2341772151898733, 'step': 780}, {'loss': 0.326, 'grad_norm': 2.323831796646118, 'learning_rate': 2.475e-05, 'epoch': 1.25, 'step': 790}, {'loss': 0.3311, 'grad_norm': 0.8759152293205261, 'learning_rate': 2.4721518987341773e-05, 'epoch': 1.2658227848101267, 'step': 800}, {'loss': 0.2994, 'grad_norm': 1.2858222723007202, 'learning_rate': 2.4693037974683543e-05, 'epoch': 1.2816455696202531, 'step': 810}, {'loss': 0.2934, 'grad_norm': 1.0961929559707642, 'learning_rate': 2.4664556962025314e-05, 'epoch': 1.2974683544303798, 'step': 820}, {'loss': 0.2852, 'grad_norm': 3.2595999240875244, 'learning_rate': 2.4636075949367088e-05, 'epoch': 1.3132911392405062, 'step': 830}, {'loss': 0.4031, 'grad_norm': 2.0660035610198975, 'learning_rate': 2.460759493670886e-05, 'epoch': 1.3291139240506329, 'step': 840}, {'loss': 0.2534, 'grad_norm': 1.1623845100402832, 'learning_rate': 2.4579113924050633e-05, 'epoch': 1.3449367088607596, 'step': 850}, {'loss': 0.3576, 'grad_norm': 1.652620792388916, 'learning_rate': 2.4550632911392404e-05, 'epoch': 1.360759493670886, 'step': 860}, {'loss': 0.3152, 'grad_norm': 1.4981026649475098, 'learning_rate': 2.4522151898734175e-05, 'epoch': 1.3765822784810127, 'step': 870}, {'loss': 0.3499, 'grad_norm': 2.0394418239593506, 'learning_rate': 2.449367088607595e-05, 'epoch': 1.3924050632911391, 'step': 880}, {'loss': 0.2725, 'grad_norm': 1.3939809799194336, 'learning_rate': 2.446518987341772e-05, 'epoch': 1.4082278481012658, 'step': 890}, {'loss': 0.3257, 'grad_norm': 1.5538643598556519, 'learning_rate': 2.4436708860759493e-05, 'epoch': 1.4240506329113924, 'step': 900}, {'loss': 0.2853, 'grad_norm': 6.701907634735107, 'learning_rate': 2.4408227848101264e-05, 'epoch': 1.439873417721519, 'step': 910}, {'loss': 0.2641, 'grad_norm': 1.0830196142196655, 'learning_rate': 2.4379746835443035e-05, 'epoch': 1.4556962025316456, 'step': 920}, {'loss': 0.2949, 'grad_norm': 1.7660822868347168, 'learning_rate': 2.435126582278481e-05, 'epoch': 1.4715189873417722, 'step': 930}, {'loss': 0.3411, 'grad_norm': 0.8635793328285217, 'learning_rate': 2.432278481012658e-05, 'epoch': 1.4873417721518987, 'step': 940}, {'loss': 0.3114, 'grad_norm': 3.3040385246276855, 'learning_rate': 2.429430379746835e-05, 'epoch': 1.5031645569620253, 'step': 950}, {'loss': 0.2457, 'grad_norm': 1.7599494457244873, 'learning_rate': 2.4265822784810125e-05, 'epoch': 1.518987341772152, 'step': 960}, {'loss': 0.2421, 'grad_norm': 1.631780982017517, 'learning_rate': 2.42373417721519e-05, 'epoch': 1.5348101265822784, 'step': 970}, {'loss': 0.3229, 'grad_norm': 0.9507118463516235, 'learning_rate': 2.420886075949367e-05, 'epoch': 1.5506329113924051, 'step': 980}, {'loss': 0.3027, 'grad_norm': 0.7173864245414734, 'learning_rate': 2.4180379746835444e-05, 'epoch': 1.5664556962025316, 'step': 990}, {'loss': 0.3509, 'grad_norm': 1.6927522420883179, 'learning_rate': 2.4151898734177214e-05, 'epoch': 1.5822784810126582, 'step': 1000}, {'loss': 0.2773, 'grad_norm': 0.7996068000793457, 'learning_rate': 2.412341772151899e-05, 'epoch': 1.5981012658227849, 'step': 1010}, {'loss': 0.2955, 'grad_norm': 1.848279356956482, 'learning_rate': 2.409493670886076e-05, 'epoch': 1.6139240506329116, 'step': 1020}, {'loss': 0.2763, 'grad_norm': 1.0177830457687378, 'learning_rate': 2.4066455696202533e-05, 'epoch': 1.629746835443038, 'step': 1030}, {'loss': 0.293, 'grad_norm': 1.0858819484710693, 'learning_rate': 2.4037974683544304e-05, 'epoch': 1.6455696202531644, 'step': 1040}, {'loss': 0.2509, 'grad_norm': 1.4211297035217285, 'learning_rate': 2.4009493670886075e-05, 'epoch': 1.6613924050632911, 'step': 1050}, {'loss': 0.2416, 'grad_norm': 1.1800347566604614, 'learning_rate': 2.398101265822785e-05, 'epoch': 1.6772151898734178, 'step': 1060}, {'loss': 0.2309, 'grad_norm': 1.4370893239974976, 'learning_rate': 2.395253164556962e-05, 'epoch': 1.6930379746835444, 'step': 1070}, {'loss': 0.2299, 'grad_norm': 1.6790660619735718, 'learning_rate': 2.392405063291139e-05, 'epoch': 1.7088607594936709, 'step': 1080}, {'loss': 0.2552, 'grad_norm': 1.1718413829803467, 'learning_rate': 2.3895569620253164e-05, 'epoch': 1.7246835443037973, 'step': 1090}, {'loss': 0.2778, 'grad_norm': 2.093810558319092, 'learning_rate': 2.3867088607594935e-05, 'epoch': 1.740506329113924, 'step': 1100}, {'loss': 0.3313, 'grad_norm': 1.5540188550949097, 'learning_rate': 2.383860759493671e-05, 'epoch': 1.7563291139240507, 'step': 1110}, {'loss': 0.2568, 'grad_norm': 1.4515016078948975, 'learning_rate': 2.381012658227848e-05, 'epoch': 1.7721518987341773, 'step': 1120}, {'loss': 0.3437, 'grad_norm': 2.1828196048736572, 'learning_rate': 2.378164556962025e-05, 'epoch': 1.7879746835443038, 'step': 1130}, {'loss': 0.3335, 'grad_norm': 1.2063159942626953, 'learning_rate': 2.3753164556962025e-05, 'epoch': 1.8037974683544302, 'step': 1140}, {'loss': 0.3066, 'grad_norm': 1.2793903350830078, 'learning_rate': 2.3724683544303796e-05, 'epoch': 1.8196202531645569, 'step': 1150}, {'loss': 0.2368, 'grad_norm': 1.154158353805542, 'learning_rate': 2.369620253164557e-05, 'epoch': 1.8354430379746836, 'step': 1160}, {'loss': 0.2756, 'grad_norm': 1.1036349534988403, 'learning_rate': 2.366772151898734e-05, 'epoch': 1.8512658227848102, 'step': 1170}, {'loss': 0.2949, 'grad_norm': 2.083754301071167, 'learning_rate': 2.363924050632911e-05, 'epoch': 1.8670886075949367, 'step': 1180}, {'loss': 0.2968, 'grad_norm': 1.2749384641647339, 'learning_rate': 2.3610759493670885e-05, 'epoch': 1.8829113924050633, 'step': 1190}, {'loss': 0.3005, 'grad_norm': 1.7184512615203857, 'learning_rate': 2.3582278481012656e-05, 'epoch': 1.8987341772151898, 'step': 1200}, {'loss': 0.2732, 'grad_norm': 3.023566961288452, 'learning_rate': 2.3553797468354427e-05, 'epoch': 1.9145569620253164, 'step': 1210}, {'loss': 0.3651, 'grad_norm': 1.4746456146240234, 'learning_rate': 2.35253164556962e-05, 'epoch': 1.9303797468354431, 'step': 1220}, {'loss': 0.2966, 'grad_norm': 2.5677027702331543, 'learning_rate': 2.349683544303797e-05, 'epoch': 1.9462025316455698, 'step': 1230}, {'loss': 0.3221, 'grad_norm': 1.395961046218872, 'learning_rate': 2.3468354430379746e-05, 'epoch': 1.9620253164556962, 'step': 1240}, {'loss': 0.2709, 'grad_norm': 1.5292097330093384, 'learning_rate': 2.3439873417721516e-05, 'epoch': 1.9778481012658227, 'step': 1250}, {'loss': 0.2453, 'grad_norm': 0.9460564851760864, 'learning_rate': 2.341139240506329e-05, 'epoch': 1.9936708860759493, 'step': 1260}, {'eval_loss': 0.2747240662574768, 'eval_precision': 0.5627425614489003, 'eval_recall': 0.4101838755304102, 'eval_f1': 0.47450231797109355, 'eval_accuracy': 0.8994483089469897, 'eval_runtime': 7.8707, 'eval_samples_per_second': 160.723, 'eval_steps_per_second': 20.202, 'epoch': 2.0, 'step': 1264}, {'loss': 0.2376, 'grad_norm': 1.2675524950027466, 'learning_rate': 2.3382911392405065e-05, 'epoch': 2.009493670886076, 'step': 1270}, {'loss': 0.3661, 'grad_norm': 1.6998498439788818, 'learning_rate': 2.3354430379746835e-05, 'epoch': 2.0253164556962027, 'step': 1280}, {'loss': 0.2673, 'grad_norm': 4.025164604187012, 'learning_rate': 2.332594936708861e-05, 'epoch': 2.041139240506329, 'step': 1290}, {'loss': 0.2769, 'grad_norm': 1.2836518287658691, 'learning_rate': 2.329746835443038e-05, 'epoch': 2.0569620253164556, 'step': 1300}, {'loss': 0.273, 'grad_norm': 2.95031476020813, 'learning_rate': 2.326898734177215e-05, 'epoch': 2.0727848101265822, 'step': 1310}, {'loss': 0.2843, 'grad_norm': 1.8866809606552124, 'learning_rate': 2.3240506329113925e-05, 'epoch': 2.088607594936709, 'step': 1320}, {'loss': 0.279, 'grad_norm': 1.6885077953338623, 'learning_rate': 2.3212025316455696e-05, 'epoch': 2.1044303797468356, 'step': 1330}, {'loss': 0.2351, 'grad_norm': 1.1694246530532837, 'learning_rate': 2.3183544303797467e-05, 'epoch': 2.1202531645569622, 'step': 1340}, {'loss': 0.2602, 'grad_norm': 1.4004384279251099, 'learning_rate': 2.315506329113924e-05, 'epoch': 2.1360759493670884, 'step': 1350}, {'loss': 0.2768, 'grad_norm': 1.065933346748352, 'learning_rate': 2.312658227848101e-05, 'epoch': 2.151898734177215, 'step': 1360}, {'loss': 0.2494, 'grad_norm': 1.5618340969085693, 'learning_rate': 2.3098101265822786e-05, 'epoch': 2.1677215189873418, 'step': 1370}, {'loss': 0.252, 'grad_norm': 0.9072777628898621, 'learning_rate': 2.3069620253164556e-05, 'epoch': 2.1835443037974684, 'step': 1380}, {'loss': 0.2912, 'grad_norm': 0.8624606728553772, 'learning_rate': 2.3041139240506327e-05, 'epoch': 2.199367088607595, 'step': 1390}, {'loss': 0.2454, 'grad_norm': 1.7113484144210815, 'learning_rate': 2.30126582278481e-05, 'epoch': 2.2151898734177213, 'step': 1400}, {'loss': 0.2876, 'grad_norm': 0.8387866616249084, 'learning_rate': 2.2984177215189872e-05, 'epoch': 2.231012658227848, 'step': 1410}, {'loss': 0.3267, 'grad_norm': 0.8041673302650452, 'learning_rate': 2.2955696202531646e-05, 'epoch': 2.2468354430379747, 'step': 1420}, {'loss': 0.2971, 'grad_norm': 3.211538314819336, 'learning_rate': 2.2927215189873417e-05, 'epoch': 2.2626582278481013, 'step': 1430}, {'loss': 0.2366, 'grad_norm': 2.2329366207122803, 'learning_rate': 2.2898734177215187e-05, 'epoch': 2.278481012658228, 'step': 1440}, {'loss': 0.2253, 'grad_norm': 0.7046168446540833, 'learning_rate': 2.287025316455696e-05, 'epoch': 2.2943037974683547, 'step': 1450}, {'loss': 0.2771, 'grad_norm': 0.9455060958862305, 'learning_rate': 2.2841772151898732e-05, 'epoch': 2.310126582278481, 'step': 1460}, {'loss': 0.285, 'grad_norm': 0.7933260202407837, 'learning_rate': 2.2813291139240503e-05, 'epoch': 2.3259493670886076, 'step': 1470}, {'loss': 0.3029, 'grad_norm': 1.5620404481887817, 'learning_rate': 2.2784810126582277e-05, 'epoch': 2.3417721518987342, 'step': 1480}, {'loss': 0.3195, 'grad_norm': 0.9957571029663086, 'learning_rate': 2.2756329113924048e-05, 'epoch': 2.357594936708861, 'step': 1490}, {'loss': 0.2345, 'grad_norm': 0.6926923990249634, 'learning_rate': 2.2727848101265822e-05, 'epoch': 2.3734177215189876, 'step': 1500}, {'loss': 0.2725, 'grad_norm': 1.4032714366912842, 'learning_rate': 2.2699367088607593e-05, 'epoch': 2.3892405063291138, 'step': 1510}, {'loss': 0.226, 'grad_norm': 25.04351234436035, 'learning_rate': 2.2670886075949363e-05, 'epoch': 2.4050632911392404, 'step': 1520}, {'loss': 0.2968, 'grad_norm': 1.1811062097549438, 'learning_rate': 2.2642405063291138e-05, 'epoch': 2.420886075949367, 'step': 1530}, {'loss': 0.2871, 'grad_norm': 2.2370505332946777, 'learning_rate': 2.2613924050632912e-05, 'epoch': 2.4367088607594938, 'step': 1540}, {'loss': 0.2815, 'grad_norm': 1.2471739053726196, 'learning_rate': 2.2585443037974686e-05, 'epoch': 2.4525316455696204, 'step': 1550}, {'loss': 0.2483, 'grad_norm': 0.8612386584281921, 'learning_rate': 2.2556962025316457e-05, 'epoch': 2.4683544303797467, 'step': 1560}, {'loss': 0.2847, 'grad_norm': 1.014554500579834, 'learning_rate': 2.2528481012658227e-05, 'epoch': 2.4841772151898733, 'step': 1570}, {'loss': 0.2422, 'grad_norm': 1.4649759531021118, 'learning_rate': 2.25e-05, 'epoch': 2.5, 'step': 1580}, {'loss': 0.2666, 'grad_norm': 2.004256010055542, 'learning_rate': 2.2471518987341772e-05, 'epoch': 2.5158227848101267, 'step': 1590}, {'loss': 0.2966, 'grad_norm': 2.1752519607543945, 'learning_rate': 2.2443037974683543e-05, 'epoch': 2.5316455696202533, 'step': 1600}, {'loss': 0.2302, 'grad_norm': 1.360969066619873, 'learning_rate': 2.2414556962025317e-05, 'epoch': 2.5474683544303796, 'step': 1610}, {'loss': 0.3024, 'grad_norm': 2.4024155139923096, 'learning_rate': 2.2386075949367088e-05, 'epoch': 2.5632911392405062, 'step': 1620}, {'loss': 0.291, 'grad_norm': 1.2564479112625122, 'learning_rate': 2.2357594936708862e-05, 'epoch': 2.579113924050633, 'step': 1630}, {'loss': 0.2634, 'grad_norm': 2.1264142990112305, 'learning_rate': 2.2329113924050633e-05, 'epoch': 2.5949367088607596, 'step': 1640}, {'loss': 0.3008, 'grad_norm': 2.841876268386841, 'learning_rate': 2.2300632911392403e-05, 'epoch': 2.6107594936708862, 'step': 1650}, {'loss': 0.3139, 'grad_norm': 1.3912216424942017, 'learning_rate': 2.2272151898734177e-05, 'epoch': 2.6265822784810124, 'step': 1660}, {'loss': 0.2511, 'grad_norm': 1.1580567359924316, 'learning_rate': 2.2243670886075948e-05, 'epoch': 2.642405063291139, 'step': 1670}, {'loss': 0.2569, 'grad_norm': 1.8704307079315186, 'learning_rate': 2.2215189873417722e-05, 'epoch': 2.6582278481012658, 'step': 1680}, {'loss': 0.2659, 'grad_norm': 0.8044678568840027, 'learning_rate': 2.2186708860759493e-05, 'epoch': 2.6740506329113924, 'step': 1690}, {'loss': 0.2967, 'grad_norm': 2.6269021034240723, 'learning_rate': 2.2158227848101264e-05, 'epoch': 2.689873417721519, 'step': 1700}, {'loss': 0.2593, 'grad_norm': 1.1587045192718506, 'learning_rate': 2.2129746835443038e-05, 'epoch': 2.7056962025316453, 'step': 1710}, {'loss': 0.3084, 'grad_norm': 1.1114912033081055, 'learning_rate': 2.210126582278481e-05, 'epoch': 2.721518987341772, 'step': 1720}, {'loss': 0.2828, 'grad_norm': 1.4565526247024536, 'learning_rate': 2.207278481012658e-05, 'epoch': 2.7373417721518987, 'step': 1730}, {'loss': 0.3258, 'grad_norm': 1.5985028743743896, 'learning_rate': 2.2044303797468353e-05, 'epoch': 2.7531645569620253, 'step': 1740}, {'loss': 0.247, 'grad_norm': 2.283828020095825, 'learning_rate': 2.2015822784810124e-05, 'epoch': 2.768987341772152, 'step': 1750}, {'loss': 0.2446, 'grad_norm': 1.103417158126831, 'learning_rate': 2.1987341772151898e-05, 'epoch': 2.7848101265822782, 'step': 1760}, {'loss': 0.2474, 'grad_norm': 1.0277036428451538, 'learning_rate': 2.195886075949367e-05, 'epoch': 2.8006329113924053, 'step': 1770}, {'loss': 0.2855, 'grad_norm': 3.568432331085205, 'learning_rate': 2.193037974683544e-05, 'epoch': 2.8164556962025316, 'step': 1780}, {'loss': 0.2399, 'grad_norm': 1.4421050548553467, 'learning_rate': 2.1901898734177214e-05, 'epoch': 2.8322784810126582, 'step': 1790}, {'loss': 0.2213, 'grad_norm': 1.2211682796478271, 'learning_rate': 2.1873417721518985e-05, 'epoch': 2.848101265822785, 'step': 1800}, {'loss': 0.1945, 'grad_norm': 0.9536290764808655, 'learning_rate': 2.184493670886076e-05, 'epoch': 2.8639240506329116, 'step': 1810}, {'loss': 0.3169, 'grad_norm': 2.2647645473480225, 'learning_rate': 2.1816455696202533e-05, 'epoch': 2.879746835443038, 'step': 1820}, {'loss': 0.3109, 'grad_norm': 1.9448438882827759, 'learning_rate': 2.1787974683544304e-05, 'epoch': 2.8955696202531644, 'step': 1830}, {'loss': 0.2152, 'grad_norm': 1.2946046590805054, 'learning_rate': 2.1759493670886078e-05, 'epoch': 2.911392405063291, 'step': 1840}, {'loss': 0.2571, 'grad_norm': 2.9784605503082275, 'learning_rate': 2.173101265822785e-05, 'epoch': 2.9272151898734178, 'step': 1850}, {'loss': 0.231, 'grad_norm': 1.3833808898925781, 'learning_rate': 2.170253164556962e-05, 'epoch': 2.9430379746835444, 'step': 1860}, {'loss': 0.196, 'grad_norm': 1.800271987915039, 'learning_rate': 2.1674050632911393e-05, 'epoch': 2.958860759493671, 'step': 1870}, {'loss': 0.2128, 'grad_norm': 1.6453238725662231, 'learning_rate': 2.1645569620253164e-05, 'epoch': 2.9746835443037973, 'step': 1880}, {'loss': 0.2823, 'grad_norm': 2.1849868297576904, 'learning_rate': 2.1617088607594938e-05, 'epoch': 2.990506329113924, 'step': 1890}, {'eval_loss': 0.27437224984169006, 'eval_precision': 0.5206422018348624, 'eval_recall': 0.5351249410655351, 'eval_f1': 0.5277842362241338, 'eval_accuracy': 0.8954185656032622, 'eval_runtime': 7.8591, 'eval_samples_per_second': 160.961, 'eval_steps_per_second': 20.231, 'epoch': 3.0, 'step': 1896}, {'loss': 0.251, 'grad_norm': 1.1330026388168335, 'learning_rate': 2.158860759493671e-05, 'epoch': 3.0063291139240507, 'step': 1900}, {'loss': 0.2599, 'grad_norm': 1.3279176950454712, 'learning_rate': 2.156012658227848e-05, 'epoch': 3.0221518987341773, 'step': 1910}, {'loss': 0.2284, 'grad_norm': 1.0153268575668335, 'learning_rate': 2.1531645569620254e-05, 'epoch': 3.037974683544304, 'step': 1920}, {'loss': 0.25, 'grad_norm': 1.410991907119751, 'learning_rate': 2.1503164556962024e-05, 'epoch': 3.0537974683544302, 'step': 1930}, {'loss': 0.2806, 'grad_norm': 1.1163290739059448, 'learning_rate': 2.1474683544303795e-05, 'epoch': 3.069620253164557, 'step': 1940}, {'loss': 0.2032, 'grad_norm': 6.388302803039551, 'learning_rate': 2.144620253164557e-05, 'epoch': 3.0854430379746836, 'step': 1950}, {'loss': 0.2544, 'grad_norm': 1.883195400238037, 'learning_rate': 2.141772151898734e-05, 'epoch': 3.1012658227848102, 'step': 1960}, {'loss': 0.2984, 'grad_norm': 0.8707901239395142, 'learning_rate': 2.1389240506329114e-05, 'epoch': 3.117088607594937, 'step': 1970}, {'loss': 0.3249, 'grad_norm': 1.543936848640442, 'learning_rate': 2.1360759493670885e-05, 'epoch': 3.132911392405063, 'step': 1980}, {'loss': 0.2247, 'grad_norm': 1.1327879428863525, 'learning_rate': 2.1332278481012656e-05, 'epoch': 3.1487341772151898, 'step': 1990}, {'loss': 0.2819, 'grad_norm': 2.081576347351074, 'learning_rate': 2.130379746835443e-05, 'epoch': 3.1645569620253164, 'step': 2000}, {'loss': 0.2159, 'grad_norm': 1.6857171058654785, 'learning_rate': 2.12753164556962e-05, 'epoch': 3.180379746835443, 'step': 2010}, {'loss': 0.2743, 'grad_norm': 1.4345778226852417, 'learning_rate': 2.1246835443037975e-05, 'epoch': 3.1962025316455698, 'step': 2020}, {'loss': 0.2068, 'grad_norm': 1.7771748304367065, 'learning_rate': 2.1218354430379745e-05, 'epoch': 3.212025316455696, 'step': 2030}, {'loss': 0.2292, 'grad_norm': 0.9275488257408142, 'learning_rate': 2.1189873417721516e-05, 'epoch': 3.2278481012658227, 'step': 2040}, {'loss': 0.2161, 'grad_norm': 0.9772177934646606, 'learning_rate': 2.116139240506329e-05, 'epoch': 3.2436708860759493, 'step': 2050}, {'loss': 0.2428, 'grad_norm': 1.081846833229065, 'learning_rate': 2.113291139240506e-05, 'epoch': 3.259493670886076, 'step': 2060}, {'loss': 0.249, 'grad_norm': 1.3570046424865723, 'learning_rate': 2.110443037974683e-05, 'epoch': 3.2753164556962027, 'step': 2070}, {'loss': 0.2027, 'grad_norm': 1.8511836528778076, 'learning_rate': 2.1075949367088606e-05, 'epoch': 3.291139240506329, 'step': 2080}, {'loss': 0.2509, 'grad_norm': 2.1988863945007324, 'learning_rate': 2.104746835443038e-05, 'epoch': 3.3069620253164556, 'step': 2090}, {'loss': 0.2029, 'grad_norm': 0.6960113048553467, 'learning_rate': 2.101898734177215e-05, 'epoch': 3.3227848101265822, 'step': 2100}, {'loss': 0.2626, 'grad_norm': 1.7439043521881104, 'learning_rate': 2.0990506329113925e-05, 'epoch': 3.338607594936709, 'step': 2110}, {'loss': 0.2633, 'grad_norm': 1.5378440618515015, 'learning_rate': 2.0962025316455695e-05, 'epoch': 3.3544303797468356, 'step': 2120}, {'loss': 0.2384, 'grad_norm': 1.3331971168518066, 'learning_rate': 2.093354430379747e-05, 'epoch': 3.370253164556962, 'step': 2130}, {'loss': 0.2624, 'grad_norm': 1.2098510265350342, 'learning_rate': 2.090506329113924e-05, 'epoch': 3.3860759493670884, 'step': 2140}, {'loss': 0.2543, 'grad_norm': 1.5039840936660767, 'learning_rate': 2.0876582278481014e-05, 'epoch': 3.401898734177215, 'step': 2150}, {'loss': 0.2442, 'grad_norm': 1.0546690225601196, 'learning_rate': 2.0848101265822785e-05, 'epoch': 3.4177215189873418, 'step': 2160}, {'loss': 0.2473, 'grad_norm': 7.071227073669434, 'learning_rate': 2.0819620253164556e-05, 'epoch': 3.4335443037974684, 'step': 2170}, {'loss': 0.2353, 'grad_norm': 1.6853405237197876, 'learning_rate': 2.079113924050633e-05, 'epoch': 3.449367088607595, 'step': 2180}, {'loss': 0.2739, 'grad_norm': 1.7451729774475098, 'learning_rate': 2.07626582278481e-05, 'epoch': 3.4651898734177213, 'step': 2190}, {'loss': 0.3051, 'grad_norm': 2.3568859100341797, 'learning_rate': 2.073417721518987e-05, 'epoch': 3.481012658227848, 'step': 2200}, {'loss': 0.2666, 'grad_norm': 0.8264746069908142, 'learning_rate': 2.0705696202531646e-05, 'epoch': 3.4968354430379747, 'step': 2210}, {'loss': 0.2774, 'grad_norm': 4.641497611999512, 'learning_rate': 2.0677215189873416e-05, 'epoch': 3.5126582278481013, 'step': 2220}, {'loss': 0.2759, 'grad_norm': 1.4408448934555054, 'learning_rate': 2.064873417721519e-05, 'epoch': 3.528481012658228, 'step': 2230}, {'loss': 0.252, 'grad_norm': 0.9269453883171082, 'learning_rate': 2.062025316455696e-05, 'epoch': 3.5443037974683547, 'step': 2240}, {'loss': 0.1863, 'grad_norm': 2.2262020111083984, 'learning_rate': 2.0591772151898732e-05, 'epoch': 3.560126582278481, 'step': 2250}, {'loss': 0.2326, 'grad_norm': 1.102782130241394, 'learning_rate': 2.0563291139240506e-05, 'epoch': 3.5759493670886076, 'step': 2260}, {'loss': 0.2328, 'grad_norm': 0.7999383807182312, 'learning_rate': 2.0534810126582277e-05, 'epoch': 3.5917721518987342, 'step': 2270}, {'loss': 0.221, 'grad_norm': 1.079530119895935, 'learning_rate': 2.050632911392405e-05, 'epoch': 3.607594936708861, 'step': 2280}, {'loss': 0.2717, 'grad_norm': 1.9587355852127075, 'learning_rate': 2.047784810126582e-05, 'epoch': 3.6234177215189876, 'step': 2290}, {'loss': 0.2236, 'grad_norm': 1.8702993392944336, 'learning_rate': 2.0449367088607592e-05, 'epoch': 3.6392405063291138, 'step': 2300}, {'loss': 0.2299, 'grad_norm': 1.6464771032333374, 'learning_rate': 2.0420886075949366e-05, 'epoch': 3.6550632911392404, 'step': 2310}, {'loss': 0.257, 'grad_norm': 1.7395429611206055, 'learning_rate': 2.0392405063291137e-05, 'epoch': 3.670886075949367, 'step': 2320}, {'loss': 0.2546, 'grad_norm': 1.4087461233139038, 'learning_rate': 2.0363924050632908e-05, 'epoch': 3.6867088607594938, 'step': 2330}, {'loss': 0.1888, 'grad_norm': 1.4481245279312134, 'learning_rate': 2.0335443037974682e-05, 'epoch': 3.7025316455696204, 'step': 2340}, {'loss': 0.2121, 'grad_norm': 0.9364511966705322, 'learning_rate': 2.0306962025316453e-05, 'epoch': 3.7183544303797467, 'step': 2350}, {'loss': 0.2064, 'grad_norm': 1.2994072437286377, 'learning_rate': 2.0278481012658227e-05, 'epoch': 3.7341772151898733, 'step': 2360}, {'loss': 0.1982, 'grad_norm': 1.4329419136047363, 'learning_rate': 2.0249999999999998e-05, 'epoch': 3.75, 'step': 2370}, {'loss': 0.2556, 'grad_norm': 2.256564140319824, 'learning_rate': 2.022151898734177e-05, 'epoch': 3.7658227848101267, 'step': 2380}, {'loss': 0.2492, 'grad_norm': 1.3401250839233398, 'learning_rate': 2.0193037974683546e-05, 'epoch': 3.7816455696202533, 'step': 2390}, {'loss': 0.2908, 'grad_norm': 0.7491885423660278, 'learning_rate': 2.0164556962025317e-05, 'epoch': 3.7974683544303796, 'step': 2400}, {'loss': 0.2312, 'grad_norm': 0.7221021056175232, 'learning_rate': 2.013607594936709e-05, 'epoch': 3.8132911392405062, 'step': 2410}, {'loss': 0.2302, 'grad_norm': 0.7942952513694763, 'learning_rate': 2.010759493670886e-05, 'epoch': 3.829113924050633, 'step': 2420}, {'loss': 0.2263, 'grad_norm': 1.9150131940841675, 'learning_rate': 2.0079113924050632e-05, 'epoch': 3.8449367088607596, 'step': 2430}, {'loss': 0.257, 'grad_norm': 1.4050511121749878, 'learning_rate': 2.0050632911392406e-05, 'epoch': 3.8607594936708862, 'step': 2440}, {'loss': 0.2843, 'grad_norm': 1.8883321285247803, 'learning_rate': 2.0022151898734177e-05, 'epoch': 3.8765822784810124, 'step': 2450}, {'loss': 0.2107, 'grad_norm': 1.8523635864257812, 'learning_rate': 1.9993670886075948e-05, 'epoch': 3.892405063291139, 'step': 2460}, {'loss': 0.2699, 'grad_norm': 3.468682050704956, 'learning_rate': 1.9965189873417722e-05, 'epoch': 3.9082278481012658, 'step': 2470}, {'loss': 0.237, 'grad_norm': 1.227970004081726, 'learning_rate': 1.9936708860759493e-05, 'epoch': 3.9240506329113924, 'step': 2480}, {'loss': 0.2609, 'grad_norm': 1.9660753011703491, 'learning_rate': 1.9908227848101267e-05, 'epoch': 3.939873417721519, 'step': 2490}, {'loss': 0.2609, 'grad_norm': 11.063789367675781, 'learning_rate': 1.9879746835443037e-05, 'epoch': 3.9556962025316453, 'step': 2500}, {'loss': 0.2624, 'grad_norm': 2.1996099948883057, 'learning_rate': 1.9851265822784808e-05, 'epoch': 3.971518987341772, 'step': 2510}, {'loss': 0.2546, 'grad_norm': 1.3001054525375366, 'learning_rate': 1.9822784810126582e-05, 'epoch': 3.9873417721518987, 'step': 2520}, {'eval_loss': 0.26410573720932007, 'eval_precision': 0.5714285714285714, 'eval_recall': 0.4582743988684583, 'eval_f1': 0.5086342229199371, 'eval_accuracy': 0.901031422403454, 'eval_runtime': 7.8547, 'eval_samples_per_second': 161.05, 'eval_steps_per_second': 20.243, 'epoch': 4.0, 'step': 2528}, {'loss': 0.219, 'grad_norm': 1.1020056009292603, 'learning_rate': 1.9794303797468353e-05, 'epoch': 4.003164556962025, 'step': 2530}, {'loss': 0.1976, 'grad_norm': 1.2460541725158691, 'learning_rate': 1.9765822784810127e-05, 'epoch': 4.018987341772152, 'step': 2540}, {'loss': 0.2333, 'grad_norm': 5.08059024810791, 'learning_rate': 1.9737341772151898e-05, 'epoch': 4.034810126582278, 'step': 2550}, {'loss': 0.165, 'grad_norm': 2.069025754928589, 'learning_rate': 1.970886075949367e-05, 'epoch': 4.050632911392405, 'step': 2560}, {'loss': 0.208, 'grad_norm': 11.963080406188965, 'learning_rate': 1.9680379746835443e-05, 'epoch': 4.0664556962025316, 'step': 2570}, {'loss': 0.2552, 'grad_norm': 1.7052102088928223, 'learning_rate': 1.9651898734177213e-05, 'epoch': 4.082278481012658, 'step': 2580}, {'loss': 0.207, 'grad_norm': 1.2789621353149414, 'learning_rate': 1.9623417721518984e-05, 'epoch': 4.098101265822785, 'step': 2590}, {'loss': 0.2634, 'grad_norm': 2.1254079341888428, 'learning_rate': 1.9594936708860758e-05, 'epoch': 4.113924050632911, 'step': 2600}, {'loss': 0.2709, 'grad_norm': 1.8298907279968262, 'learning_rate': 1.956645569620253e-05, 'epoch': 4.129746835443038, 'step': 2610}, {'loss': 0.1996, 'grad_norm': 1.290130376815796, 'learning_rate': 1.9537974683544303e-05, 'epoch': 4.1455696202531644, 'step': 2620}, {'loss': 0.2169, 'grad_norm': 1.3700968027114868, 'learning_rate': 1.9509493670886074e-05, 'epoch': 4.1613924050632916, 'step': 2630}, {'loss': 0.2914, 'grad_norm': 0.8735533952713013, 'learning_rate': 1.9481012658227848e-05, 'epoch': 4.177215189873418, 'step': 2640}, {'loss': 0.2351, 'grad_norm': 1.4381296634674072, 'learning_rate': 1.945253164556962e-05, 'epoch': 4.193037974683544, 'step': 2650}, {'loss': 0.2044, 'grad_norm': 1.4679101705551147, 'learning_rate': 1.9424050632911393e-05, 'epoch': 4.208860759493671, 'step': 2660}, {'loss': 0.2067, 'grad_norm': 3.6275360584259033, 'learning_rate': 1.9395569620253167e-05, 'epoch': 4.224683544303797, 'step': 2670}, {'loss': 0.2081, 'grad_norm': 1.0886898040771484, 'learning_rate': 1.9367088607594938e-05, 'epoch': 4.2405063291139244, 'step': 2680}, {'loss': 0.2361, 'grad_norm': 1.6019526720046997, 'learning_rate': 1.933860759493671e-05, 'epoch': 4.256329113924051, 'step': 2690}, {'loss': 0.2264, 'grad_norm': 1.6092692613601685, 'learning_rate': 1.9310126582278482e-05, 'epoch': 4.272151898734177, 'step': 2700}, {'loss': 0.1793, 'grad_norm': 1.4706140756607056, 'learning_rate': 1.9281645569620253e-05, 'epoch': 4.287974683544304, 'step': 2710}, {'loss': 0.2886, 'grad_norm': 1.3852730989456177, 'learning_rate': 1.9253164556962024e-05, 'epoch': 4.30379746835443, 'step': 2720}, {'loss': 0.2123, 'grad_norm': 1.5640748739242554, 'learning_rate': 1.9224683544303798e-05, 'epoch': 4.319620253164557, 'step': 2730}, {'loss': 0.2041, 'grad_norm': 1.0402551889419556, 'learning_rate': 1.919620253164557e-05, 'epoch': 4.3354430379746836, 'step': 2740}, {'loss': 0.2368, 'grad_norm': 0.6995445489883423, 'learning_rate': 1.9167721518987343e-05, 'epoch': 4.35126582278481, 'step': 2750}, {'loss': 0.2342, 'grad_norm': 0.9282007217407227, 'learning_rate': 1.9139240506329114e-05, 'epoch': 4.367088607594937, 'step': 2760}, {'loss': 0.2446, 'grad_norm': 1.979098916053772, 'learning_rate': 1.9110759493670884e-05, 'epoch': 4.382911392405063, 'step': 2770}, {'loss': 0.2247, 'grad_norm': 0.9013834595680237, 'learning_rate': 1.908227848101266e-05, 'epoch': 4.39873417721519, 'step': 2780}, {'loss': 0.2422, 'grad_norm': 1.4671924114227295, 'learning_rate': 1.905379746835443e-05, 'epoch': 4.4145569620253164, 'step': 2790}, {'loss': 0.2626, 'grad_norm': 5.402894020080566, 'learning_rate': 1.9025316455696203e-05, 'epoch': 4.430379746835443, 'step': 2800}, {'loss': 0.2256, 'grad_norm': 1.8656353950500488, 'learning_rate': 1.8996835443037974e-05, 'epoch': 4.44620253164557, 'step': 2810}, {'loss': 0.2262, 'grad_norm': 4.675536632537842, 'learning_rate': 1.8968354430379745e-05, 'epoch': 4.462025316455696, 'step': 2820}, {'loss': 0.2293, 'grad_norm': 1.2641292810440063, 'learning_rate': 1.893987341772152e-05, 'epoch': 4.477848101265823, 'step': 2830}, {'loss': 0.1882, 'grad_norm': 1.4088252782821655, 'learning_rate': 1.891139240506329e-05, 'epoch': 4.493670886075949, 'step': 2840}, {'loss': 0.2546, 'grad_norm': 2.0362513065338135, 'learning_rate': 1.888291139240506e-05, 'epoch': 4.509493670886076, 'step': 2850}, {'loss': 0.2173, 'grad_norm': 1.3334672451019287, 'learning_rate': 1.8854430379746834e-05, 'epoch': 4.525316455696203, 'step': 2860}, {'loss': 0.1952, 'grad_norm': 2.724724769592285, 'learning_rate': 1.8825949367088605e-05, 'epoch': 4.541139240506329, 'step': 2870}, {'loss': 0.2082, 'grad_norm': 1.4176297187805176, 'learning_rate': 1.879746835443038e-05, 'epoch': 4.556962025316456, 'step': 2880}, {'loss': 0.2092, 'grad_norm': 1.0349096059799194, 'learning_rate': 1.876898734177215e-05, 'epoch': 4.572784810126582, 'step': 2890}, {'loss': 0.2087, 'grad_norm': 2.3660693168640137, 'learning_rate': 1.874050632911392e-05, 'epoch': 4.588607594936709, 'step': 2900}, {'loss': 0.2368, 'grad_norm': 3.3076164722442627, 'learning_rate': 1.8712025316455695e-05, 'epoch': 4.6044303797468356, 'step': 2910}, {'loss': 0.2623, 'grad_norm': 1.672505497932434, 'learning_rate': 1.8683544303797466e-05, 'epoch': 4.620253164556962, 'step': 2920}, {'loss': 0.2129, 'grad_norm': 2.05149245262146, 'learning_rate': 1.865506329113924e-05, 'epoch': 4.636075949367089, 'step': 2930}, {'loss': 0.2096, 'grad_norm': 1.514909267425537, 'learning_rate': 1.8626582278481014e-05, 'epoch': 4.651898734177215, 'step': 2940}, {'loss': 0.2059, 'grad_norm': 1.1426398754119873, 'learning_rate': 1.8598101265822785e-05, 'epoch': 4.667721518987342, 'step': 2950}, {'loss': 0.2289, 'grad_norm': 0.8902450203895569, 'learning_rate': 1.856962025316456e-05, 'epoch': 4.6835443037974684, 'step': 2960}, {'loss': 0.1876, 'grad_norm': 0.8103486895561218, 'learning_rate': 1.854113924050633e-05, 'epoch': 4.699367088607595, 'step': 2970}, {'loss': 0.2712, 'grad_norm': 1.000061273574829, 'learning_rate': 1.85126582278481e-05, 'epoch': 4.715189873417722, 'step': 2980}, {'loss': 0.2145, 'grad_norm': 3.17999529838562, 'learning_rate': 1.8484177215189874e-05, 'epoch': 4.731012658227848, 'step': 2990}, {'loss': 0.2122, 'grad_norm': 1.4520419836044312, 'learning_rate': 1.8455696202531645e-05, 'epoch': 4.746835443037975, 'step': 3000}, {'loss': 0.2484, 'grad_norm': 2.064898729324341, 'learning_rate': 1.842721518987342e-05, 'epoch': 4.762658227848101, 'step': 3010}, {'loss': 0.1829, 'grad_norm': 0.8887865543365479, 'learning_rate': 1.839873417721519e-05, 'epoch': 4.7784810126582276, 'step': 3020}, {'loss': 0.2394, 'grad_norm': 2.8460938930511475, 'learning_rate': 1.837025316455696e-05, 'epoch': 4.794303797468355, 'step': 3030}, {'loss': 0.3257, 'grad_norm': 1.2612223625183105, 'learning_rate': 1.8341772151898735e-05, 'epoch': 4.810126582278481, 'step': 3040}, {'loss': 0.2676, 'grad_norm': 1.915570616722107, 'learning_rate': 1.8313291139240505e-05, 'epoch': 4.825949367088608, 'step': 3050}, {'loss': 0.2491, 'grad_norm': 1.4881681203842163, 'learning_rate': 1.8284810126582276e-05, 'epoch': 4.841772151898734, 'step': 3060}, {'loss': 0.2439, 'grad_norm': 3.554205894470215, 'learning_rate': 1.825632911392405e-05, 'epoch': 4.8575949367088604, 'step': 3070}, {'loss': 0.1694, 'grad_norm': 0.8376394510269165, 'learning_rate': 1.822784810126582e-05, 'epoch': 4.8734177215189876, 'step': 3080}, {'loss': 0.2529, 'grad_norm': 1.1796295642852783, 'learning_rate': 1.8199367088607595e-05, 'epoch': 4.889240506329114, 'step': 3090}, {'loss': 0.2078, 'grad_norm': 1.5454411506652832, 'learning_rate': 1.8170886075949366e-05, 'epoch': 4.905063291139241, 'step': 3100}, {'loss': 0.2642, 'grad_norm': 1.6999316215515137, 'learning_rate': 1.8142405063291137e-05, 'epoch': 4.920886075949367, 'step': 3110}, {'loss': 0.2511, 'grad_norm': 1.3740019798278809, 'learning_rate': 1.811392405063291e-05, 'epoch': 4.936708860759493, 'step': 3120}, {'loss': 0.2044, 'grad_norm': 0.9502460956573486, 'learning_rate': 1.808544303797468e-05, 'epoch': 4.9525316455696204, 'step': 3130}, {'loss': 0.2786, 'grad_norm': 1.813827633857727, 'learning_rate': 1.8056962025316456e-05, 'epoch': 4.968354430379747, 'step': 3140}, {'loss': 0.1808, 'grad_norm': 9.110261917114258, 'learning_rate': 1.8028481012658226e-05, 'epoch': 4.984177215189874, 'step': 3150}, {'loss': 0.2491, 'grad_norm': 1.5562430620193481, 'learning_rate': 1.7999999999999997e-05, 'epoch': 5.0, 'step': 3160}, {'eval_loss': 0.2682683765888214, 'eval_precision': 0.565386755703951, 'eval_recall': 0.47901933050447904, 'eval_f1': 0.518631955079122, 'eval_accuracy': 0.9006956104581434, 'eval_runtime': 7.836, 'eval_samples_per_second': 161.435, 'eval_steps_per_second': 20.291, 'epoch': 5.0, 'step': 3160}, {'loss': 0.2725, 'grad_norm': 0.9924190640449524, 'learning_rate': 1.797151898734177e-05, 'epoch': 5.015822784810126, 'step': 3170}, {'loss': 0.2116, 'grad_norm': 0.7433944344520569, 'learning_rate': 1.7943037974683542e-05, 'epoch': 5.031645569620253, 'step': 3180}, {'loss': 0.2388, 'grad_norm': 1.1201838254928589, 'learning_rate': 1.7914556962025313e-05, 'epoch': 5.0474683544303796, 'step': 3190}, {'loss': 0.1781, 'grad_norm': 1.2639482021331787, 'learning_rate': 1.7886075949367087e-05, 'epoch': 5.063291139240507, 'step': 3200}, {'loss': 0.2065, 'grad_norm': 1.652383804321289, 'learning_rate': 1.785759493670886e-05, 'epoch': 5.079113924050633, 'step': 3210}, {'loss': 0.2002, 'grad_norm': 0.8399100303649902, 'learning_rate': 1.7829113924050635e-05, 'epoch': 5.094936708860759, 'step': 3220}, {'loss': 0.2104, 'grad_norm': 0.854764997959137, 'learning_rate': 1.7800632911392406e-05, 'epoch': 5.110759493670886, 'step': 3230}, {'loss': 0.2028, 'grad_norm': 1.3234158754348755, 'learning_rate': 1.7772151898734176e-05, 'epoch': 5.1265822784810124, 'step': 3240}, {'loss': 0.243, 'grad_norm': 2.573427677154541, 'learning_rate': 1.774367088607595e-05, 'epoch': 5.1424050632911396, 'step': 3250}, {'loss': 0.2473, 'grad_norm': 1.8922138214111328, 'learning_rate': 1.771518987341772e-05, 'epoch': 5.158227848101266, 'step': 3260}, {'loss': 0.2154, 'grad_norm': 2.3252203464508057, 'learning_rate': 1.7686708860759495e-05, 'epoch': 5.174050632911392, 'step': 3270}, {'loss': 0.2197, 'grad_norm': 1.681624174118042, 'learning_rate': 1.7658227848101266e-05, 'epoch': 5.189873417721519, 'step': 3280}, {'loss': 0.1808, 'grad_norm': 1.8773925304412842, 'learning_rate': 1.7629746835443037e-05, 'epoch': 5.205696202531645, 'step': 3290}, {'loss': 0.1596, 'grad_norm': 1.2871612310409546, 'learning_rate': 1.760126582278481e-05, 'epoch': 5.2215189873417724, 'step': 3300}, {'loss': 0.2149, 'grad_norm': 1.7449870109558105, 'learning_rate': 1.7572784810126582e-05, 'epoch': 5.237341772151899, 'step': 3310}, {'loss': 0.1742, 'grad_norm': 1.6604037284851074, 'learning_rate': 1.7544303797468352e-05, 'epoch': 5.253164556962025, 'step': 3320}, {'loss': 0.2923, 'grad_norm': 1.715043067932129, 'learning_rate': 1.7515822784810127e-05, 'epoch': 5.268987341772152, 'step': 3330}, {'loss': 0.232, 'grad_norm': 1.1847116947174072, 'learning_rate': 1.7487341772151897e-05, 'epoch': 5.284810126582278, 'step': 3340}, {'loss': 0.2041, 'grad_norm': 1.338782787322998, 'learning_rate': 1.745886075949367e-05, 'epoch': 5.300632911392405, 'step': 3350}, {'loss': 0.214, 'grad_norm': 1.9195586442947388, 'learning_rate': 1.7430379746835442e-05, 'epoch': 5.3164556962025316, 'step': 3360}, {'loss': 0.1948, 'grad_norm': 0.7732423543930054, 'learning_rate': 1.7401898734177213e-05, 'epoch': 5.332278481012658, 'step': 3370}, {'loss': 0.2264, 'grad_norm': 1.2310478687286377, 'learning_rate': 1.7373417721518987e-05, 'epoch': 5.348101265822785, 'step': 3380}, {'loss': 0.202, 'grad_norm': 0.9969481229782104, 'learning_rate': 1.7344936708860758e-05, 'epoch': 5.363924050632911, 'step': 3390}, {'loss': 0.254, 'grad_norm': 1.7196400165557861, 'learning_rate': 1.7316455696202532e-05, 'epoch': 5.379746835443038, 'step': 3400}, {'loss': 0.2512, 'grad_norm': 1.59727942943573, 'learning_rate': 1.7287974683544303e-05, 'epoch': 5.3955696202531644, 'step': 3410}, {'loss': 0.2008, 'grad_norm': 1.9509388208389282, 'learning_rate': 1.7259493670886073e-05, 'epoch': 5.4113924050632916, 'step': 3420}, {'loss': 0.2133, 'grad_norm': 1.0934618711471558, 'learning_rate': 1.7231012658227847e-05, 'epoch': 5.427215189873418, 'step': 3430}, {'loss': 0.1759, 'grad_norm': 1.0961874723434448, 'learning_rate': 1.7202531645569618e-05, 'epoch': 5.443037974683544, 'step': 3440}, {'loss': 0.2319, 'grad_norm': 2.8632864952087402, 'learning_rate': 1.717405063291139e-05, 'epoch': 5.458860759493671, 'step': 3450}, {'loss': 0.1924, 'grad_norm': 0.9432712197303772, 'learning_rate': 1.7145569620253163e-05, 'epoch': 5.474683544303797, 'step': 3460}, {'loss': 0.2447, 'grad_norm': 1.1625561714172363, 'learning_rate': 1.7117088607594934e-05, 'epoch': 5.4905063291139244, 'step': 3470}, {'loss': 0.2008, 'grad_norm': 1.5663343667984009, 'learning_rate': 1.7088607594936708e-05, 'epoch': 5.506329113924051, 'step': 3480}, {'loss': 0.2432, 'grad_norm': 1.751577615737915, 'learning_rate': 1.7060126582278482e-05, 'epoch': 5.522151898734177, 'step': 3490}, {'loss': 0.2322, 'grad_norm': 1.3429683446884155, 'learning_rate': 1.7031645569620253e-05, 'epoch': 5.537974683544304, 'step': 3500}, {'loss': 0.209, 'grad_norm': 2.472421884536743, 'learning_rate': 1.7003164556962027e-05, 'epoch': 5.55379746835443, 'step': 3510}, {'loss': 0.1807, 'grad_norm': 1.2992689609527588, 'learning_rate': 1.6974683544303798e-05, 'epoch': 5.569620253164557, 'step': 3520}, {'loss': 0.2016, 'grad_norm': 1.6517702341079712, 'learning_rate': 1.6946202531645572e-05, 'epoch': 5.5854430379746836, 'step': 3530}, {'loss': 0.2097, 'grad_norm': 0.8781575560569763, 'learning_rate': 1.6917721518987342e-05, 'epoch': 5.60126582278481, 'step': 3540}, {'loss': 0.2163, 'grad_norm': 2.0603179931640625, 'learning_rate': 1.6889240506329113e-05, 'epoch': 5.617088607594937, 'step': 3550}, {'loss': 0.2149, 'grad_norm': 0.994097113609314, 'learning_rate': 1.6860759493670887e-05, 'epoch': 5.632911392405063, 'step': 3560}, {'loss': 0.188, 'grad_norm': 1.4540679454803467, 'learning_rate': 1.6832278481012658e-05, 'epoch': 5.64873417721519, 'step': 3570}, {'loss': 0.197, 'grad_norm': 1.4349159002304077, 'learning_rate': 1.680379746835443e-05, 'epoch': 5.6645569620253164, 'step': 3580}, {'loss': 0.122, 'grad_norm': 1.352476716041565, 'learning_rate': 1.6775316455696203e-05, 'epoch': 5.680379746835443, 'step': 3590}, {'loss': 0.2382, 'grad_norm': 1.1856833696365356, 'learning_rate': 1.6746835443037974e-05, 'epoch': 5.69620253164557, 'step': 3600}, {'loss': 0.1956, 'grad_norm': 1.061376929283142, 'learning_rate': 1.6718354430379748e-05, 'epoch': 5.712025316455696, 'step': 3610}, {'loss': 0.1972, 'grad_norm': 0.9443422555923462, 'learning_rate': 1.668987341772152e-05, 'epoch': 5.727848101265823, 'step': 3620}, {'loss': 0.2396, 'grad_norm': 1.5492641925811768, 'learning_rate': 1.666139240506329e-05, 'epoch': 5.743670886075949, 'step': 3630}, {'loss': 0.1787, 'grad_norm': 2.901406764984131, 'learning_rate': 1.6632911392405063e-05, 'epoch': 5.759493670886076, 'step': 3640}, {'loss': 0.2063, 'grad_norm': 5.872940540313721, 'learning_rate': 1.6604430379746834e-05, 'epoch': 5.775316455696203, 'step': 3650}, {'loss': 0.2402, 'grad_norm': 1.6689057350158691, 'learning_rate': 1.6575949367088608e-05, 'epoch': 5.791139240506329, 'step': 3660}, {'loss': 0.2536, 'grad_norm': 1.3392959833145142, 'learning_rate': 1.654746835443038e-05, 'epoch': 5.806962025316456, 'step': 3670}, {'loss': 0.2178, 'grad_norm': 1.8529340028762817, 'learning_rate': 1.651898734177215e-05, 'epoch': 5.822784810126582, 'step': 3680}, {'loss': 0.2266, 'grad_norm': 2.16994571685791, 'learning_rate': 1.6490506329113924e-05, 'epoch': 5.838607594936709, 'step': 3690}, {'loss': 0.1745, 'grad_norm': 1.0874392986297607, 'learning_rate': 1.6462025316455694e-05, 'epoch': 5.8544303797468356, 'step': 3700}, {'loss': 0.1647, 'grad_norm': 2.0463244915008545, 'learning_rate': 1.6433544303797465e-05, 'epoch': 5.870253164556962, 'step': 3710}, {'loss': 0.2057, 'grad_norm': 4.077934265136719, 'learning_rate': 1.640506329113924e-05, 'epoch': 5.886075949367089, 'step': 3720}, {'loss': 0.2261, 'grad_norm': 1.224548578262329, 'learning_rate': 1.637658227848101e-05, 'epoch': 5.901898734177215, 'step': 3730}, {'loss': 0.1522, 'grad_norm': 1.8999203443527222, 'learning_rate': 1.6348101265822784e-05, 'epoch': 5.917721518987342, 'step': 3740}, {'loss': 0.1482, 'grad_norm': 0.8889005184173584, 'learning_rate': 1.6319620253164555e-05, 'epoch': 5.9335443037974684, 'step': 3750}, {'loss': 0.1842, 'grad_norm': 1.6189677715301514, 'learning_rate': 1.629113924050633e-05, 'epoch': 5.949367088607595, 'step': 3760}, {'loss': 0.2001, 'grad_norm': 1.788071632385254, 'learning_rate': 1.62626582278481e-05, 'epoch': 5.965189873417722, 'step': 3770}, {'loss': 0.1663, 'grad_norm': 1.2700843811035156, 'learning_rate': 1.6234177215189874e-05, 'epoch': 5.981012658227848, 'step': 3780}, {'loss': 0.2521, 'grad_norm': 3.9180567264556885, 'learning_rate': 1.6205696202531648e-05, 'epoch': 5.996835443037975, 'step': 3790}, {'eval_loss': 0.28285419940948486, 'eval_precision': 0.57289972899729, 'eval_recall': 0.49834983498349833, 'eval_f1': 0.5330307614725164, 'eval_accuracy': 0.9009354761333653, 'eval_runtime': 7.8483, 'eval_samples_per_second': 161.182, 'eval_steps_per_second': 20.259, 'epoch': 6.0, 'step': 3792}]\nError in callback <bound method _WandbInit._pause_backend of <wandb.sdk.wandb_init._WandbInit object at 0x7e3ab8ca3460>> (for post_run_cell), with arguments args (<ExecutionResult object at 7e3981a9ee30, execution_count=34 error_before_exec=None error_in_exec=None info=<ExecutionInfo object at 7e3981a9e500, raw_cell=\"print(trainer.state.log_history)\" store_history=True silent=False shell_futures=True cell_id=da073403-c549-45aa-b01d-973b12a39cb0> result=None>,),kwargs {}:\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mBrokenPipeError\u001b[0m                           Traceback (most recent call last)","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/wandb_init.py:438\u001b[0m, in \u001b[0;36m_WandbInit._pause_backend\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    436\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbackend\u001b[38;5;241m.\u001b[39minterface \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    437\u001b[0m     logger\u001b[38;5;241m.\u001b[39minfo(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpausing backend\u001b[39m\u001b[38;5;124m\"\u001b[39m)  \u001b[38;5;66;03m# type: ignore\u001b[39;00m\n\u001b[0;32m--> 438\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbackend\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minterface\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpublish_pause\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface.py:659\u001b[0m, in \u001b[0;36mInterfaceBase.publish_pause\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    657\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mpublish_pause\u001b[39m(\u001b[38;5;28mself\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    658\u001b[0m     pause \u001b[38;5;241m=\u001b[39m pb\u001b[38;5;241m.\u001b[39mPauseRequest()\n\u001b[0;32m--> 659\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_publish_pause\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpause\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface_shared.py:355\u001b[0m, in \u001b[0;36mInterfaceShared._publish_pause\u001b[0;34m(self, pause)\u001b[0m\n\u001b[1;32m    353\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_publish_pause\u001b[39m(\u001b[38;5;28mself\u001b[39m, pause: pb\u001b[38;5;241m.\u001b[39mPauseRequest) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    354\u001b[0m     rec \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_make_request(pause\u001b[38;5;241m=\u001b[39mpause)\n\u001b[0;32m--> 355\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_publish\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrec\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface_sock.py:51\u001b[0m, in \u001b[0;36mInterfaceSock._publish\u001b[0;34m(self, record, local)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_publish\u001b[39m(\u001b[38;5;28mself\u001b[39m, record: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpb.Record\u001b[39m\u001b[38;5;124m\"\u001b[39m, local: Optional[\u001b[38;5;28mbool\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m     50\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_assign(record)\n\u001b[0;32m---> 51\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sock_client\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend_record_publish\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrecord\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:221\u001b[0m, in \u001b[0;36mSockClient.send_record_publish\u001b[0;34m(self, record)\u001b[0m\n\u001b[1;32m    219\u001b[0m server_req \u001b[38;5;241m=\u001b[39m spb\u001b[38;5;241m.\u001b[39mServerRequest()\n\u001b[1;32m    220\u001b[0m server_req\u001b[38;5;241m.\u001b[39mrecord_publish\u001b[38;5;241m.\u001b[39mCopyFrom(record)\n\u001b[0;32m--> 221\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend_server_request\u001b[49m\u001b[43m(\u001b[49m\u001b[43mserver_req\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:155\u001b[0m, in \u001b[0;36mSockClient.send_server_request\u001b[0;34m(self, msg)\u001b[0m\n\u001b[1;32m    154\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21msend_server_request\u001b[39m(\u001b[38;5;28mself\u001b[39m, msg: Any) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 155\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_send_message\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmsg\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:152\u001b[0m, in \u001b[0;36mSockClient._send_message\u001b[0;34m(self, msg)\u001b[0m\n\u001b[1;32m    150\u001b[0m header \u001b[38;5;241m=\u001b[39m struct\u001b[38;5;241m.\u001b[39mpack(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m<BI\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mord\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mW\u001b[39m\u001b[38;5;124m\"\u001b[39m), raw_size)\n\u001b[1;32m    151\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock:\n\u001b[0;32m--> 152\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sendall_with_error_handle\u001b[49m\u001b[43m(\u001b[49m\u001b[43mheader\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:130\u001b[0m, in \u001b[0;36mSockClient._sendall_with_error_handle\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m    128\u001b[0m start_time \u001b[38;5;241m=\u001b[39m time\u001b[38;5;241m.\u001b[39mmonotonic()\n\u001b[1;32m    129\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 130\u001b[0m     sent \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sock\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    131\u001b[0m     \u001b[38;5;66;03m# sent equal to 0 indicates a closed socket\u001b[39;00m\n\u001b[1;32m    132\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m sent \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m:\n","\u001b[0;31mBrokenPipeError\u001b[0m: [Errno 32] Broken pipe"],"ename":"BrokenPipeError","evalue":"[Errno 32] Broken pipe","output_type":"error"}]},{"cell_type":"code","source":"loss_values = []\neval_loss_values = []\n\nfor i, item in enumerate(trainer.state.log_history):\n    if 'eval_loss' in item:\n        # Check if there's a loss value before this eval_loss\n        if i > 0 and 'loss' in trainer.state.log_history[i - 1]:\n            loss_values.append(trainer.state.log_history[i - 1]['loss'])\n            eval_loss_values.append(item['eval_loss'])\n\n# Now both lists have the same size\nprint(len(loss_values), len(eval_loss_values))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BbwaOVv-KNyY","outputId":"ecdb2c87-152a-487e-e82f-344a55b57f60","execution":{"iopub.status.busy":"2024-06-19T10:47:42.524993Z","iopub.execute_input":"2024-06-19T10:47:42.525738Z","iopub.status.idle":"2024-06-19T10:47:42.709628Z","shell.execute_reply.started":"2024-06-19T10:47:42.525699Z","shell.execute_reply":"2024-06-19T10:47:42.708570Z"},"trusted":true},"execution_count":35,"outputs":[{"name":"stdout","text":"Error in callback <bound method _WandbInit._resume_backend of <wandb.sdk.wandb_init._WandbInit object at 0x7e3ab8ca3460>> (for pre_run_cell), with arguments args (<ExecutionInfo object at 7e3ac0cb4e20, raw_cell=\"loss_values = []\neval_loss_values = []\n\nfor i, ite..\" store_history=True silent=False shell_futures=True cell_id=7a6d04f9-a93b-48b0-89cb-826999c9dfed>,),kwargs {}:\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mBrokenPipeError\u001b[0m                           Traceback (most recent call last)","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/wandb_init.py:443\u001b[0m, in \u001b[0;36m_WandbInit._resume_backend\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    441\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbackend \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbackend\u001b[38;5;241m.\u001b[39minterface \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    442\u001b[0m     logger\u001b[38;5;241m.\u001b[39minfo(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mresuming backend\u001b[39m\u001b[38;5;124m\"\u001b[39m)  \u001b[38;5;66;03m# type: ignore\u001b[39;00m\n\u001b[0;32m--> 443\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbackend\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minterface\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpublish_resume\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface.py:667\u001b[0m, in \u001b[0;36mInterfaceBase.publish_resume\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    665\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mpublish_resume\u001b[39m(\u001b[38;5;28mself\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    666\u001b[0m     resume \u001b[38;5;241m=\u001b[39m pb\u001b[38;5;241m.\u001b[39mResumeRequest()\n\u001b[0;32m--> 667\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_publish_resume\u001b[49m\u001b[43m(\u001b[49m\u001b[43mresume\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface_shared.py:359\u001b[0m, in \u001b[0;36mInterfaceShared._publish_resume\u001b[0;34m(self, resume)\u001b[0m\n\u001b[1;32m    357\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_publish_resume\u001b[39m(\u001b[38;5;28mself\u001b[39m, resume: pb\u001b[38;5;241m.\u001b[39mResumeRequest) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    358\u001b[0m     rec \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_make_request(resume\u001b[38;5;241m=\u001b[39mresume)\n\u001b[0;32m--> 359\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_publish\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrec\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface_sock.py:51\u001b[0m, in \u001b[0;36mInterfaceSock._publish\u001b[0;34m(self, record, local)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_publish\u001b[39m(\u001b[38;5;28mself\u001b[39m, record: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpb.Record\u001b[39m\u001b[38;5;124m\"\u001b[39m, local: Optional[\u001b[38;5;28mbool\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m     50\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_assign(record)\n\u001b[0;32m---> 51\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sock_client\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend_record_publish\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrecord\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:221\u001b[0m, in \u001b[0;36mSockClient.send_record_publish\u001b[0;34m(self, record)\u001b[0m\n\u001b[1;32m    219\u001b[0m server_req \u001b[38;5;241m=\u001b[39m spb\u001b[38;5;241m.\u001b[39mServerRequest()\n\u001b[1;32m    220\u001b[0m server_req\u001b[38;5;241m.\u001b[39mrecord_publish\u001b[38;5;241m.\u001b[39mCopyFrom(record)\n\u001b[0;32m--> 221\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend_server_request\u001b[49m\u001b[43m(\u001b[49m\u001b[43mserver_req\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:155\u001b[0m, in \u001b[0;36mSockClient.send_server_request\u001b[0;34m(self, msg)\u001b[0m\n\u001b[1;32m    154\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21msend_server_request\u001b[39m(\u001b[38;5;28mself\u001b[39m, msg: Any) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 155\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_send_message\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmsg\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:152\u001b[0m, in \u001b[0;36mSockClient._send_message\u001b[0;34m(self, msg)\u001b[0m\n\u001b[1;32m    150\u001b[0m header \u001b[38;5;241m=\u001b[39m struct\u001b[38;5;241m.\u001b[39mpack(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m<BI\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mord\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mW\u001b[39m\u001b[38;5;124m\"\u001b[39m), raw_size)\n\u001b[1;32m    151\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock:\n\u001b[0;32m--> 152\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sendall_with_error_handle\u001b[49m\u001b[43m(\u001b[49m\u001b[43mheader\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:130\u001b[0m, in \u001b[0;36mSockClient._sendall_with_error_handle\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m    128\u001b[0m start_time \u001b[38;5;241m=\u001b[39m time\u001b[38;5;241m.\u001b[39mmonotonic()\n\u001b[1;32m    129\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 130\u001b[0m     sent \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sock\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    131\u001b[0m     \u001b[38;5;66;03m# sent equal to 0 indicates a closed socket\u001b[39;00m\n\u001b[1;32m    132\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m sent \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m:\n","\u001b[0;31mBrokenPipeError\u001b[0m: [Errno 32] Broken pipe"],"ename":"BrokenPipeError","evalue":"[Errno 32] Broken pipe","output_type":"error"},{"name":"stdout","text":"6 6\nError in callback <bound method _WandbInit._pause_backend of <wandb.sdk.wandb_init._WandbInit object at 0x7e3ab8ca3460>> (for post_run_cell), with arguments args (<ExecutionResult object at 7e3ab1332d70, execution_count=35 error_before_exec=None error_in_exec=None info=<ExecutionInfo object at 7e3ac0cb4e20, raw_cell=\"loss_values = []\neval_loss_values = []\n\nfor i, ite..\" store_history=True silent=False shell_futures=True cell_id=7a6d04f9-a93b-48b0-89cb-826999c9dfed> result=None>,),kwargs {}:\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mBrokenPipeError\u001b[0m                           Traceback (most recent call last)","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/wandb_init.py:438\u001b[0m, in \u001b[0;36m_WandbInit._pause_backend\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    436\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbackend\u001b[38;5;241m.\u001b[39minterface \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    437\u001b[0m     logger\u001b[38;5;241m.\u001b[39minfo(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpausing backend\u001b[39m\u001b[38;5;124m\"\u001b[39m)  \u001b[38;5;66;03m# type: ignore\u001b[39;00m\n\u001b[0;32m--> 438\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbackend\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minterface\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpublish_pause\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface.py:659\u001b[0m, in \u001b[0;36mInterfaceBase.publish_pause\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    657\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mpublish_pause\u001b[39m(\u001b[38;5;28mself\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    658\u001b[0m     pause \u001b[38;5;241m=\u001b[39m pb\u001b[38;5;241m.\u001b[39mPauseRequest()\n\u001b[0;32m--> 659\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_publish_pause\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpause\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface_shared.py:355\u001b[0m, in \u001b[0;36mInterfaceShared._publish_pause\u001b[0;34m(self, pause)\u001b[0m\n\u001b[1;32m    353\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_publish_pause\u001b[39m(\u001b[38;5;28mself\u001b[39m, pause: pb\u001b[38;5;241m.\u001b[39mPauseRequest) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    354\u001b[0m     rec \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_make_request(pause\u001b[38;5;241m=\u001b[39mpause)\n\u001b[0;32m--> 355\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_publish\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrec\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface_sock.py:51\u001b[0m, in \u001b[0;36mInterfaceSock._publish\u001b[0;34m(self, record, local)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_publish\u001b[39m(\u001b[38;5;28mself\u001b[39m, record: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpb.Record\u001b[39m\u001b[38;5;124m\"\u001b[39m, local: Optional[\u001b[38;5;28mbool\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m     50\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_assign(record)\n\u001b[0;32m---> 51\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sock_client\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend_record_publish\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrecord\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:221\u001b[0m, in \u001b[0;36mSockClient.send_record_publish\u001b[0;34m(self, record)\u001b[0m\n\u001b[1;32m    219\u001b[0m server_req \u001b[38;5;241m=\u001b[39m spb\u001b[38;5;241m.\u001b[39mServerRequest()\n\u001b[1;32m    220\u001b[0m server_req\u001b[38;5;241m.\u001b[39mrecord_publish\u001b[38;5;241m.\u001b[39mCopyFrom(record)\n\u001b[0;32m--> 221\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend_server_request\u001b[49m\u001b[43m(\u001b[49m\u001b[43mserver_req\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:155\u001b[0m, in \u001b[0;36mSockClient.send_server_request\u001b[0;34m(self, msg)\u001b[0m\n\u001b[1;32m    154\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21msend_server_request\u001b[39m(\u001b[38;5;28mself\u001b[39m, msg: Any) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 155\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_send_message\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmsg\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:152\u001b[0m, in \u001b[0;36mSockClient._send_message\u001b[0;34m(self, msg)\u001b[0m\n\u001b[1;32m    150\u001b[0m header \u001b[38;5;241m=\u001b[39m struct\u001b[38;5;241m.\u001b[39mpack(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m<BI\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mord\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mW\u001b[39m\u001b[38;5;124m\"\u001b[39m), raw_size)\n\u001b[1;32m    151\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock:\n\u001b[0;32m--> 152\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sendall_with_error_handle\u001b[49m\u001b[43m(\u001b[49m\u001b[43mheader\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:130\u001b[0m, in \u001b[0;36mSockClient._sendall_with_error_handle\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m    128\u001b[0m start_time \u001b[38;5;241m=\u001b[39m time\u001b[38;5;241m.\u001b[39mmonotonic()\n\u001b[1;32m    129\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 130\u001b[0m     sent \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sock\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    131\u001b[0m     \u001b[38;5;66;03m# sent equal to 0 indicates a closed socket\u001b[39;00m\n\u001b[1;32m    132\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m sent \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m:\n","\u001b[0;31mBrokenPipeError\u001b[0m: [Errno 32] Broken pipe"],"ename":"BrokenPipeError","evalue":"[Errno 32] Broken pipe","output_type":"error"}]},{"cell_type":"code","source":"print(loss_values)\nprint(eval_loss_values)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pHAioCmrKOxR","outputId":"db30897e-cc7f-4187-d3db-839a54868392","execution":{"iopub.status.busy":"2024-06-19T10:47:44.234143Z","iopub.execute_input":"2024-06-19T10:47:44.234554Z","iopub.status.idle":"2024-06-19T10:47:44.415908Z","shell.execute_reply.started":"2024-06-19T10:47:44.234521Z","shell.execute_reply":"2024-06-19T10:47:44.414891Z"},"trusted":true},"execution_count":36,"outputs":[{"name":"stdout","text":"Error in callback <bound method _WandbInit._resume_backend of <wandb.sdk.wandb_init._WandbInit object at 0x7e3ab8ca3460>> (for pre_run_cell), with arguments args (<ExecutionInfo object at 7e3a117a7670, raw_cell=\"print(loss_values)\nprint(eval_loss_values)\" store_history=True silent=False shell_futures=True cell_id=1cb65cf0-4453-4526-a2ee-308b48d99f2b>,),kwargs {}:\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mBrokenPipeError\u001b[0m                           Traceback (most recent call last)","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/wandb_init.py:443\u001b[0m, in \u001b[0;36m_WandbInit._resume_backend\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    441\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbackend \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbackend\u001b[38;5;241m.\u001b[39minterface \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    442\u001b[0m     logger\u001b[38;5;241m.\u001b[39minfo(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mresuming backend\u001b[39m\u001b[38;5;124m\"\u001b[39m)  \u001b[38;5;66;03m# type: ignore\u001b[39;00m\n\u001b[0;32m--> 443\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbackend\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minterface\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpublish_resume\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface.py:667\u001b[0m, in \u001b[0;36mInterfaceBase.publish_resume\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    665\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mpublish_resume\u001b[39m(\u001b[38;5;28mself\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    666\u001b[0m     resume \u001b[38;5;241m=\u001b[39m pb\u001b[38;5;241m.\u001b[39mResumeRequest()\n\u001b[0;32m--> 667\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_publish_resume\u001b[49m\u001b[43m(\u001b[49m\u001b[43mresume\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface_shared.py:359\u001b[0m, in \u001b[0;36mInterfaceShared._publish_resume\u001b[0;34m(self, resume)\u001b[0m\n\u001b[1;32m    357\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_publish_resume\u001b[39m(\u001b[38;5;28mself\u001b[39m, resume: pb\u001b[38;5;241m.\u001b[39mResumeRequest) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    358\u001b[0m     rec \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_make_request(resume\u001b[38;5;241m=\u001b[39mresume)\n\u001b[0;32m--> 359\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_publish\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrec\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface_sock.py:51\u001b[0m, in \u001b[0;36mInterfaceSock._publish\u001b[0;34m(self, record, local)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_publish\u001b[39m(\u001b[38;5;28mself\u001b[39m, record: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpb.Record\u001b[39m\u001b[38;5;124m\"\u001b[39m, local: Optional[\u001b[38;5;28mbool\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m     50\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_assign(record)\n\u001b[0;32m---> 51\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sock_client\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend_record_publish\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrecord\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:221\u001b[0m, in \u001b[0;36mSockClient.send_record_publish\u001b[0;34m(self, record)\u001b[0m\n\u001b[1;32m    219\u001b[0m server_req \u001b[38;5;241m=\u001b[39m spb\u001b[38;5;241m.\u001b[39mServerRequest()\n\u001b[1;32m    220\u001b[0m server_req\u001b[38;5;241m.\u001b[39mrecord_publish\u001b[38;5;241m.\u001b[39mCopyFrom(record)\n\u001b[0;32m--> 221\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend_server_request\u001b[49m\u001b[43m(\u001b[49m\u001b[43mserver_req\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:155\u001b[0m, in \u001b[0;36mSockClient.send_server_request\u001b[0;34m(self, msg)\u001b[0m\n\u001b[1;32m    154\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21msend_server_request\u001b[39m(\u001b[38;5;28mself\u001b[39m, msg: Any) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 155\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_send_message\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmsg\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:152\u001b[0m, in \u001b[0;36mSockClient._send_message\u001b[0;34m(self, msg)\u001b[0m\n\u001b[1;32m    150\u001b[0m header \u001b[38;5;241m=\u001b[39m struct\u001b[38;5;241m.\u001b[39mpack(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m<BI\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mord\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mW\u001b[39m\u001b[38;5;124m\"\u001b[39m), raw_size)\n\u001b[1;32m    151\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock:\n\u001b[0;32m--> 152\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sendall_with_error_handle\u001b[49m\u001b[43m(\u001b[49m\u001b[43mheader\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:130\u001b[0m, in \u001b[0;36mSockClient._sendall_with_error_handle\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m    128\u001b[0m start_time \u001b[38;5;241m=\u001b[39m time\u001b[38;5;241m.\u001b[39mmonotonic()\n\u001b[1;32m    129\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 130\u001b[0m     sent \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sock\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    131\u001b[0m     \u001b[38;5;66;03m# sent equal to 0 indicates a closed socket\u001b[39;00m\n\u001b[1;32m    132\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m sent \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m:\n","\u001b[0;31mBrokenPipeError\u001b[0m: [Errno 32] Broken pipe"],"ename":"BrokenPipeError","evalue":"[Errno 32] Broken pipe","output_type":"error"},{"name":"stdout","text":"[0.3816, 0.2453, 0.2823, 0.2546, 0.2491, 0.2521]\n[0.29867395758628845, 0.2747240662574768, 0.27437224984169006, 0.26410573720932007, 0.2682683765888214, 0.28285419940948486]\nError in callback <bound method _WandbInit._pause_backend of <wandb.sdk.wandb_init._WandbInit object at 0x7e3ab8ca3460>> (for post_run_cell), with arguments args (<ExecutionResult object at 7e3a117a7640, execution_count=36 error_before_exec=None error_in_exec=None info=<ExecutionInfo object at 7e3a117a7670, raw_cell=\"print(loss_values)\nprint(eval_loss_values)\" store_history=True silent=False shell_futures=True cell_id=1cb65cf0-4453-4526-a2ee-308b48d99f2b> result=None>,),kwargs {}:\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mBrokenPipeError\u001b[0m                           Traceback (most recent call last)","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/wandb_init.py:438\u001b[0m, in \u001b[0;36m_WandbInit._pause_backend\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    436\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbackend\u001b[38;5;241m.\u001b[39minterface \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    437\u001b[0m     logger\u001b[38;5;241m.\u001b[39minfo(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpausing backend\u001b[39m\u001b[38;5;124m\"\u001b[39m)  \u001b[38;5;66;03m# type: ignore\u001b[39;00m\n\u001b[0;32m--> 438\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbackend\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minterface\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpublish_pause\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface.py:659\u001b[0m, in \u001b[0;36mInterfaceBase.publish_pause\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    657\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mpublish_pause\u001b[39m(\u001b[38;5;28mself\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    658\u001b[0m     pause \u001b[38;5;241m=\u001b[39m pb\u001b[38;5;241m.\u001b[39mPauseRequest()\n\u001b[0;32m--> 659\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_publish_pause\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpause\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface_shared.py:355\u001b[0m, in \u001b[0;36mInterfaceShared._publish_pause\u001b[0;34m(self, pause)\u001b[0m\n\u001b[1;32m    353\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_publish_pause\u001b[39m(\u001b[38;5;28mself\u001b[39m, pause: pb\u001b[38;5;241m.\u001b[39mPauseRequest) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    354\u001b[0m     rec \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_make_request(pause\u001b[38;5;241m=\u001b[39mpause)\n\u001b[0;32m--> 355\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_publish\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrec\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface_sock.py:51\u001b[0m, in \u001b[0;36mInterfaceSock._publish\u001b[0;34m(self, record, local)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_publish\u001b[39m(\u001b[38;5;28mself\u001b[39m, record: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpb.Record\u001b[39m\u001b[38;5;124m\"\u001b[39m, local: Optional[\u001b[38;5;28mbool\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m     50\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_assign(record)\n\u001b[0;32m---> 51\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sock_client\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend_record_publish\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrecord\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:221\u001b[0m, in \u001b[0;36mSockClient.send_record_publish\u001b[0;34m(self, record)\u001b[0m\n\u001b[1;32m    219\u001b[0m server_req \u001b[38;5;241m=\u001b[39m spb\u001b[38;5;241m.\u001b[39mServerRequest()\n\u001b[1;32m    220\u001b[0m server_req\u001b[38;5;241m.\u001b[39mrecord_publish\u001b[38;5;241m.\u001b[39mCopyFrom(record)\n\u001b[0;32m--> 221\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend_server_request\u001b[49m\u001b[43m(\u001b[49m\u001b[43mserver_req\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:155\u001b[0m, in \u001b[0;36mSockClient.send_server_request\u001b[0;34m(self, msg)\u001b[0m\n\u001b[1;32m    154\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21msend_server_request\u001b[39m(\u001b[38;5;28mself\u001b[39m, msg: Any) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 155\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_send_message\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmsg\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:152\u001b[0m, in \u001b[0;36mSockClient._send_message\u001b[0;34m(self, msg)\u001b[0m\n\u001b[1;32m    150\u001b[0m header \u001b[38;5;241m=\u001b[39m struct\u001b[38;5;241m.\u001b[39mpack(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m<BI\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mord\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mW\u001b[39m\u001b[38;5;124m\"\u001b[39m), raw_size)\n\u001b[1;32m    151\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock:\n\u001b[0;32m--> 152\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sendall_with_error_handle\u001b[49m\u001b[43m(\u001b[49m\u001b[43mheader\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:130\u001b[0m, in \u001b[0;36mSockClient._sendall_with_error_handle\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m    128\u001b[0m start_time \u001b[38;5;241m=\u001b[39m time\u001b[38;5;241m.\u001b[39mmonotonic()\n\u001b[1;32m    129\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 130\u001b[0m     sent \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sock\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    131\u001b[0m     \u001b[38;5;66;03m# sent equal to 0 indicates a closed socket\u001b[39;00m\n\u001b[1;32m    132\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m sent \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m:\n","\u001b[0;31mBrokenPipeError\u001b[0m: [Errno 32] Broken pipe"],"ename":"BrokenPipeError","evalue":"[Errno 32] Broken pipe","output_type":"error"}]},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Plot training and validation loss curves\nloss_values = [entry['loss'] for entry in trainer.state.log_history if 'loss' in entry]\neval_loss_values = [entry['eval_loss'] for entry in trainer.state.log_history if 'eval_loss' in entry]\nplt.plot(loss_values, label='Training Loss')\nplt.plot(eval_loss_values, label='Validation Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.title('Training and Validation Loss')\nplt.legend()\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"zLIlZ69SKQ1W","outputId":"3ae63bd2-fcdd-4462-d059-c54bd6f3a635","execution":{"iopub.status.busy":"2024-06-19T10:47:45.751110Z","iopub.execute_input":"2024-06-19T10:47:45.751504Z","iopub.status.idle":"2024-06-19T10:47:46.564471Z","shell.execute_reply.started":"2024-06-19T10:47:45.751470Z","shell.execute_reply":"2024-06-19T10:47:46.563418Z"},"trusted":true},"execution_count":37,"outputs":[{"name":"stdout","text":"Error in callback <bound method _WandbInit._resume_backend of <wandb.sdk.wandb_init._WandbInit object at 0x7e3ab8ca3460>> (for pre_run_cell), with arguments args (<ExecutionInfo object at 7e3a117a6f20, raw_cell=\"import seaborn as sns\nimport matplotlib.pyplot as ..\" store_history=True silent=False shell_futures=True cell_id=c4813e6d-29d5-49ff-a72b-8fdb41c8431f>,),kwargs {}:\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mBrokenPipeError\u001b[0m                           Traceback (most recent call last)","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/wandb_init.py:443\u001b[0m, in \u001b[0;36m_WandbInit._resume_backend\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    441\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbackend \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbackend\u001b[38;5;241m.\u001b[39minterface \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    442\u001b[0m     logger\u001b[38;5;241m.\u001b[39minfo(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mresuming backend\u001b[39m\u001b[38;5;124m\"\u001b[39m)  \u001b[38;5;66;03m# type: ignore\u001b[39;00m\n\u001b[0;32m--> 443\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbackend\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minterface\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpublish_resume\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface.py:667\u001b[0m, in \u001b[0;36mInterfaceBase.publish_resume\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    665\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mpublish_resume\u001b[39m(\u001b[38;5;28mself\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    666\u001b[0m     resume \u001b[38;5;241m=\u001b[39m pb\u001b[38;5;241m.\u001b[39mResumeRequest()\n\u001b[0;32m--> 667\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_publish_resume\u001b[49m\u001b[43m(\u001b[49m\u001b[43mresume\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface_shared.py:359\u001b[0m, in \u001b[0;36mInterfaceShared._publish_resume\u001b[0;34m(self, resume)\u001b[0m\n\u001b[1;32m    357\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_publish_resume\u001b[39m(\u001b[38;5;28mself\u001b[39m, resume: pb\u001b[38;5;241m.\u001b[39mResumeRequest) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    358\u001b[0m     rec \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_make_request(resume\u001b[38;5;241m=\u001b[39mresume)\n\u001b[0;32m--> 359\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_publish\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrec\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface_sock.py:51\u001b[0m, in \u001b[0;36mInterfaceSock._publish\u001b[0;34m(self, record, local)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_publish\u001b[39m(\u001b[38;5;28mself\u001b[39m, record: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpb.Record\u001b[39m\u001b[38;5;124m\"\u001b[39m, local: Optional[\u001b[38;5;28mbool\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m     50\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_assign(record)\n\u001b[0;32m---> 51\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sock_client\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend_record_publish\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrecord\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:221\u001b[0m, in \u001b[0;36mSockClient.send_record_publish\u001b[0;34m(self, record)\u001b[0m\n\u001b[1;32m    219\u001b[0m server_req \u001b[38;5;241m=\u001b[39m spb\u001b[38;5;241m.\u001b[39mServerRequest()\n\u001b[1;32m    220\u001b[0m server_req\u001b[38;5;241m.\u001b[39mrecord_publish\u001b[38;5;241m.\u001b[39mCopyFrom(record)\n\u001b[0;32m--> 221\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend_server_request\u001b[49m\u001b[43m(\u001b[49m\u001b[43mserver_req\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:155\u001b[0m, in \u001b[0;36mSockClient.send_server_request\u001b[0;34m(self, msg)\u001b[0m\n\u001b[1;32m    154\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21msend_server_request\u001b[39m(\u001b[38;5;28mself\u001b[39m, msg: Any) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 155\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_send_message\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmsg\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:152\u001b[0m, in \u001b[0;36mSockClient._send_message\u001b[0;34m(self, msg)\u001b[0m\n\u001b[1;32m    150\u001b[0m header \u001b[38;5;241m=\u001b[39m struct\u001b[38;5;241m.\u001b[39mpack(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m<BI\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mord\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mW\u001b[39m\u001b[38;5;124m\"\u001b[39m), raw_size)\n\u001b[1;32m    151\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock:\n\u001b[0;32m--> 152\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sendall_with_error_handle\u001b[49m\u001b[43m(\u001b[49m\u001b[43mheader\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:130\u001b[0m, in \u001b[0;36mSockClient._sendall_with_error_handle\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m    128\u001b[0m start_time \u001b[38;5;241m=\u001b[39m time\u001b[38;5;241m.\u001b[39mmonotonic()\n\u001b[1;32m    129\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 130\u001b[0m     sent \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sock\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    131\u001b[0m     \u001b[38;5;66;03m# sent equal to 0 indicates a closed socket\u001b[39;00m\n\u001b[1;32m    132\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m sent \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m:\n","\u001b[0;31mBrokenPipeError\u001b[0m: [Errno 32] Broken pipe"],"ename":"BrokenPipeError","evalue":"[Errno 32] Broken pipe","output_type":"error"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Error in callback <bound method _WandbInit._pause_backend of <wandb.sdk.wandb_init._WandbInit object at 0x7e3ab8ca3460>> (for post_run_cell), with arguments args (<ExecutionResult object at 7e3a117a72b0, execution_count=37 error_before_exec=None error_in_exec=None info=<ExecutionInfo object at 7e3a117a6f20, raw_cell=\"import seaborn as sns\nimport matplotlib.pyplot as ..\" store_history=True silent=False shell_futures=True cell_id=c4813e6d-29d5-49ff-a72b-8fdb41c8431f> result=None>,),kwargs {}:\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mBrokenPipeError\u001b[0m                           Traceback (most recent call last)","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/wandb_init.py:438\u001b[0m, in \u001b[0;36m_WandbInit._pause_backend\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    436\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbackend\u001b[38;5;241m.\u001b[39minterface \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    437\u001b[0m     logger\u001b[38;5;241m.\u001b[39minfo(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpausing backend\u001b[39m\u001b[38;5;124m\"\u001b[39m)  \u001b[38;5;66;03m# type: ignore\u001b[39;00m\n\u001b[0;32m--> 438\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbackend\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minterface\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpublish_pause\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface.py:659\u001b[0m, in \u001b[0;36mInterfaceBase.publish_pause\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    657\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mpublish_pause\u001b[39m(\u001b[38;5;28mself\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    658\u001b[0m     pause \u001b[38;5;241m=\u001b[39m pb\u001b[38;5;241m.\u001b[39mPauseRequest()\n\u001b[0;32m--> 659\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_publish_pause\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpause\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface_shared.py:355\u001b[0m, in \u001b[0;36mInterfaceShared._publish_pause\u001b[0;34m(self, pause)\u001b[0m\n\u001b[1;32m    353\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_publish_pause\u001b[39m(\u001b[38;5;28mself\u001b[39m, pause: pb\u001b[38;5;241m.\u001b[39mPauseRequest) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    354\u001b[0m     rec \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_make_request(pause\u001b[38;5;241m=\u001b[39mpause)\n\u001b[0;32m--> 355\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_publish\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrec\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/interface/interface_sock.py:51\u001b[0m, in \u001b[0;36mInterfaceSock._publish\u001b[0;34m(self, record, local)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_publish\u001b[39m(\u001b[38;5;28mself\u001b[39m, record: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpb.Record\u001b[39m\u001b[38;5;124m\"\u001b[39m, local: Optional[\u001b[38;5;28mbool\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m     50\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_assign(record)\n\u001b[0;32m---> 51\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sock_client\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend_record_publish\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrecord\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:221\u001b[0m, in \u001b[0;36mSockClient.send_record_publish\u001b[0;34m(self, record)\u001b[0m\n\u001b[1;32m    219\u001b[0m server_req \u001b[38;5;241m=\u001b[39m spb\u001b[38;5;241m.\u001b[39mServerRequest()\n\u001b[1;32m    220\u001b[0m server_req\u001b[38;5;241m.\u001b[39mrecord_publish\u001b[38;5;241m.\u001b[39mCopyFrom(record)\n\u001b[0;32m--> 221\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend_server_request\u001b[49m\u001b[43m(\u001b[49m\u001b[43mserver_req\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:155\u001b[0m, in \u001b[0;36mSockClient.send_server_request\u001b[0;34m(self, msg)\u001b[0m\n\u001b[1;32m    154\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21msend_server_request\u001b[39m(\u001b[38;5;28mself\u001b[39m, msg: Any) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 155\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_send_message\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmsg\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:152\u001b[0m, in \u001b[0;36mSockClient._send_message\u001b[0;34m(self, msg)\u001b[0m\n\u001b[1;32m    150\u001b[0m header \u001b[38;5;241m=\u001b[39m struct\u001b[38;5;241m.\u001b[39mpack(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m<BI\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mord\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mW\u001b[39m\u001b[38;5;124m\"\u001b[39m), raw_size)\n\u001b[1;32m    151\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock:\n\u001b[0;32m--> 152\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sendall_with_error_handle\u001b[49m\u001b[43m(\u001b[49m\u001b[43mheader\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/wandb/sdk/lib/sock_client.py:130\u001b[0m, in \u001b[0;36mSockClient._sendall_with_error_handle\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m    128\u001b[0m start_time \u001b[38;5;241m=\u001b[39m time\u001b[38;5;241m.\u001b[39mmonotonic()\n\u001b[1;32m    129\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 130\u001b[0m     sent \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sock\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    131\u001b[0m     \u001b[38;5;66;03m# sent equal to 0 indicates a closed socket\u001b[39;00m\n\u001b[1;32m    132\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m sent \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m:\n","\u001b[0;31mBrokenPipeError\u001b[0m: [Errno 32] Broken pipe"],"ename":"BrokenPipeError","evalue":"[Errno 32] Broken pipe","output_type":"error"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}